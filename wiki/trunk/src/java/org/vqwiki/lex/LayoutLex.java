/* The following code was generated by JFlex 1.3.5 on 6/15/06 4:24 PM */

package org.vqwiki.lex;

/*
Very Quick Wiki - WikiWikiWeb clone
Copyright (C) 2001-2003 Gareth Cronin

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program (gpl.txt); if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

import java.io.*;
import org.apache.log4j.Logger;
import org.vqwiki.lex.Lexer;
import org.vqwiki.Environment;
import org.vqwiki.WikiBase;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 6/15/06 4:24 PM from the specification file
 * <tt>file:/E:/code/workspace/wiki/trunk/src/lex/layout.jflex</tt>
 */
public class LayoutLex implements org.vqwiki.lex.Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int LIST = 8;
  final public static int YYINITIAL = 0;
  final public static int EXTERNAL = 12;
  final public static int PRE = 6;
  final public static int TABLE = 10;
  final public static int OFF = 4;
  final public static int NORMAL = 2;

  /**
   * YY_LEXSTATE[l] is the state in the DFA for the lexical state l
   * YY_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private final static int YY_LEXSTATE[] = { 
     0,  0,  1,  2,  3,  3,  4,  4,  5,  6,  7,  7,  8, 8
  };

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\7\1\1\2\0\1\2\22\0\1\3\2\0\1\6\6\0"+
    "\1\10\2\0\1\4\1\0\1\16\14\0\1\12\1\0\1\14\1\0"+
    "\1\20\32\13\1\11\1\17\1\15\1\0\1\5\1\0\32\13\57\0"+
    "\1\13\12\0\1\13\4\0\1\13\5\0\27\13\1\0\37\13\1\0"+
    "\u013f\13\31\0\162\13\4\0\14\13\16\0\5\13\11\0\1\13\213\0"+
    "\1\13\13\0\1\13\1\0\3\13\1\0\1\13\1\0\24\13\1\0"+
    "\54\13\1\0\46\13\1\0\5\13\4\0\202\13\10\0\105\13\1\0"+
    "\46\13\2\0\2\13\6\0\20\13\41\0\46\13\2\0\1\13\7\0"+
    "\47\13\110\0\33\13\5\0\3\13\56\0\32\13\5\0\13\13\43\0"+
    "\2\13\1\0\143\13\1\0\1\13\17\0\2\13\7\0\2\13\12\0"+
    "\3\13\2\0\1\13\20\0\1\13\1\0\36\13\35\0\3\13\60\0"+
    "\46\13\13\0\1\13\u0152\0\66\13\3\0\1\13\22\0\1\13\7\0"+
    "\12\13\43\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0"+
    "\1\13\3\0\4\13\3\0\1\13\36\0\2\13\1\0\3\13\16\0"+
    "\2\13\23\0\6\13\4\0\2\13\2\0\26\13\1\0\7\13\1\0"+
    "\2\13\1\0\2\13\1\0\2\13\37\0\4\13\1\0\1\13\23\0"+
    "\3\13\20\0\11\13\1\0\3\13\1\0\26\13\1\0\7\13\1\0"+
    "\2\13\1\0\5\13\3\0\1\13\22\0\1\13\17\0\2\13\43\0"+
    "\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0"+
    "\5\13\3\0\1\13\36\0\2\13\1\0\3\13\17\0\1\13\21\0"+
    "\1\13\1\0\6\13\3\0\3\13\1\0\4\13\3\0\2\13\1\0"+
    "\1\13\1\0\2\13\3\0\2\13\3\0\3\13\3\0\10\13\1\0"+
    "\3\13\113\0\10\13\1\0\3\13\1\0\27\13\1\0\12\13\1\0"+
    "\5\13\46\0\2\13\43\0\10\13\1\0\3\13\1\0\27\13\1\0"+
    "\12\13\1\0\5\13\3\0\1\13\40\0\1\13\1\0\2\13\43\0"+
    "\10\13\1\0\3\13\1\0\27\13\1\0\20\13\46\0\2\13\43\0"+
    "\22\13\3\0\30\13\1\0\11\13\1\0\1\13\2\0\7\13\72\0"+
    "\60\13\1\0\2\13\14\0\7\13\72\0\2\13\1\0\1\13\2\0"+
    "\2\13\1\0\1\13\2\0\1\13\6\0\4\13\1\0\7\13\1\0"+
    "\3\13\1\0\1\13\1\0\1\13\2\0\2\13\1\0\4\13\1\0"+
    "\2\13\11\0\1\13\2\0\5\13\1\0\1\13\25\0\2\13\42\0"+
    "\1\13\77\0\10\13\1\0\42\13\35\0\4\13\164\0\42\13\1\0"+
    "\5\13\1\0\2\13\45\0\6\13\112\0\46\13\12\0\51\13\7\0"+
    "\132\13\5\0\104\13\5\0\122\13\6\0\7\13\1\0\77\13\1\0"+
    "\1\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0"+
    "\47\13\1\0\1\13\1\0\4\13\2\0\37\13\1\0\1\13\1\0"+
    "\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\7\13\1\0"+
    "\7\13\1\0\27\13\1\0\37\13\1\0\1\13\1\0\4\13\2\0"+
    "\7\13\1\0\47\13\1\0\23\13\105\0\125\13\14\0\u026c\13\2\0"+
    "\10\13\12\0\32\13\5\0\113\13\25\0\15\13\1\0\4\13\16\0"+
    "\22\13\16\0\22\13\16\0\15\13\1\0\3\13\17\0\64\13\43\0"+
    "\1\13\4\0\1\13\103\0\130\13\10\0\51\13\127\0\35\13\63\0"+
    "\36\13\2\0\5\13\u038b\0\154\13\224\0\234\13\4\0\132\13\6\0"+
    "\26\13\2\0\6\13\2\0\46\13\2\0\6\13\2\0\10\13\1\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\37\13\2\0\65\13\1\0"+
    "\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0"+
    "\6\13\4\0\15\13\5\0\3\13\1\0\7\13\164\0\1\13\15\0"+
    "\1\13\202\0\1\13\4\0\1\13\2\0\12\13\1\0\1\13\3\0"+
    "\5\13\6\0\1\13\1\0\1\13\1\0\1\13\1\0\4\13\1\0"+
    "\3\13\1\0\7\13\3\0\3\13\5\0\5\13\u0ebb\0\2\13\52\0"+
    "\5\13\5\0\2\13\4\0\126\13\6\0\3\13\1\0\132\13\1\0"+
    "\4\13\5\0\50\13\4\0\136\13\21\0\30\13\70\0\20\13\u0200\0"+
    "\u19b6\13\112\0\u51a6\13\132\0\u048d\13\u0773\0\u2ba4\13\u215c\0\u012e\13\2\0"+
    "\73\13\225\0\7\13\14\0\5\13\5\0\1\13\1\0\12\13\1\0"+
    "\15\13\1\0\5\13\1\0\1\13\1\0\2\13\1\0\2\13\1\0"+
    "\154\13\41\0\u016b\13\22\0\100\13\2\0\66\13\50\0\14\13\164\0"+
    "\5\13\1\0\207\13\44\0\32\13\6\0\32\13\13\0\131\13\3\0"+
    "\6\13\2\0\6\13\2\0\6\13\2\0\3\13\43\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    17,    34,    51,    68,    85,   102,   119,   136,     0, 
      153,   170,     0,   187,   204,   221,   238,   255,   272,   289, 
      306,   323,   340,     0,   357,   374,   391,   408,     0,     0, 
      425,   442,   459,   476,     0,   493,   476,   510,   238,   527, 
        0,   544,   561,   578,   595,   612,   340,   629,     0,     0, 
      646,   391,   663,   442,   680,   476,   697,   714,   731,   748, 
      765,   782,     0,   799,   816,   833,   850,   867,   884,   901, 
      918,     0,   935,   952,     0,   459,   969,   986,  1003,     0, 
     1020,     0,  1037,     0,     0,  1054,  1071,  1088,  1105,     0, 
     1122,  1139,     0,  1156
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\21\0\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\12\1\22\5\12\1\23\1\24\1\12\1\25"+
    "\1\26\1\27\1\16\1\17\1\20\1\21\1\12\1\22"+
    "\5\12\1\23\1\24\1\12\1\30\1\31\1\15\1\12"+
    "\1\32\1\12\1\15\12\12\1\33\1\34\1\35\1\12"+
    "\1\17\1\12\1\35\1\12\1\22\5\12\1\23\2\12"+
    "\1\36\1\37\1\15\3\12\1\40\12\12\1\36\1\37"+
    "\1\41\3\12\1\40\11\12\1\42\1\43\1\44\1\45"+
    "\2\42\1\12\1\45\11\42\1\12\3\35\3\12\1\35"+
    "\1\12\1\46\7\12\7\0\1\47\12\0\1\13\23\0"+
    "\1\50\21\0\1\51\21\0\1\52\20\0\1\53\1\47"+
    "\1\53\22\0\1\54\13\0\1\55\33\0\1\56\3\0"+
    "\1\57\3\0\1\47\12\0\1\25\22\0\1\60\16\0"+
    "\1\30\24\0\1\61\14\0\1\62\1\63\17\0\1\64"+
    "\20\0\1\36\25\0\1\65\1\66\1\65\13\0\1\67"+
    "\15\0\1\70\1\0\4\70\1\71\13\70\1\43\4\70"+
    "\1\71\12\70\12\0\1\72\12\0\1\73\22\0\1\74"+
    "\12\0\1\75\1\0\17\75\13\0\1\76\12\0\1\77"+
    "\33\0\1\100\3\0\1\101\16\0\1\62\17\0\1\102"+
    "\1\0\17\102\3\0\1\103\23\0\1\104\30\0\1\105"+
    "\6\0\1\106\22\0\1\107\12\0\1\75\1\110\17\75"+
    "\13\0\1\76\1\111\24\0\1\112\3\0\1\57\2\0"+
    "\1\53\1\0\1\53\10\0\1\102\1\113\17\102\3\0"+
    "\1\114\2\0\1\65\1\0\1\65\11\0\1\115\1\116"+
    "\31\0\1\117\6\0\1\120\1\121\17\0\1\122\1\123"+
    "\33\0\1\124\4\0\1\125\1\126\24\0\1\127\13\0"+
    "\1\115\32\0\1\117\1\130\5\0\1\120\20\0\1\122"+
    "\20\0\1\125\25\0\1\131\27\0\1\132\11\0\1\133"+
    "\20\0\1\134\13\0\1\135\1\136\17\0\1\135\17\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     8,  0,  0,  0,  0,  0,  0,  0,  0,  9,  1,  1,  9,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  9,  9,  1,  1, 
     1,  1,  9,  1,  1,  1,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0, 
     9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  0,  0,  1,  0,  0,  0,  9,  0,  0,  9,  0,  0,  0,  0,  9, 
     0,  9,  0,  9,  9,  0,  0,  0,  0,  9,  0,  0,  9,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
  protected boolean allowHtml;
  protected int listLevel;
  protected boolean ordered;
  protected static Logger cat = Logger.getLogger( LayoutLex.class );
  protected String virtualWiki;

	protected boolean exists( String topic ){
	  try{
	    return WikiBase.getInstance().exists( virtualWiki, topic );
	  }catch( Exception err ){
	    cat.error( err );
	  }
	  return false;
	}

  public void setVirtualWiki( String vWiki ){
    this.virtualWiki = vWiki;
  }

  protected String getListEntry(String text)
  {
    cat.debug( "first list item: " + text );
    int count = 0;
    ordered = false;

    cat.debug( "First char='" + text.charAt(0) + "'" );
    if( text.charAt( 0 ) == '#' )
      ordered = true;

    listLevel = 1;
    StringBuffer buffer = new StringBuffer();
    if( ordered )
      buffer.append( "<ol>" );
    else
      buffer.append( "<ul>" );
    buffer.append( "<li>" );
    buffer.append( text.substring( count + 1 ).trim() );
    return buffer.toString();
  }
  
  protected String getListSingleEntry(String text)
  {
	  cat.debug( "another list item: " + text );
	  boolean tabs = false;
	  int count = 0;
	  if(text.charAt(0) == '\t')
	  {
	    tabs = true;
	    for( int i = 0; i < text.length(); i++ ){
	      if( text.charAt( i ) == '\t' )
	        count++;
	      else
	        break;
	    }
	  }
	  else
	  {
	    tabs = false;
	    for( int i = 0; i < text.length(); i +=  3 ){
	      if((i + 3 <= text.length()) && (text.substring( i, i + 3 ).equals("   ")) )
	        count++;
	      else
	        break;
	    }
	  }
	  StringBuffer buffer = new StringBuffer();
	  if( count > listLevel ){
		for (int i=count-listLevel;i>0;i--)
		{
		  if( ordered )
		    buffer.append( "\n<ol>" );
		  else
		    buffer.append( "\n<ul>" );
		}
	    listLevel = count;
	  }
	  else if( count < listLevel ){
		buffer.append( "</li>" );
		for (int i = listLevel - count ; i > 0 ; i--)
		{
		    if( ordered )
		      buffer.append( "</ol>" );
		    else
		      buffer.append( "</ul>" );
		}
	    listLevel = count;
	    buffer.append( "\n" );
	  }
	  else{
	    buffer.append( "</li>\n" );
	  }
	  buffer.append( "<li>" );
	  if (tabs)
	  {
	    buffer.append(text.substring( count + 1 ).trim());
	  }
	  else
	  {
	    buffer.append(text.substring((count * 3) + 1).trim());
	  }
	  return buffer.toString();
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LayoutLex(java.io.Reader in) {
  	yybegin( NORMAL );
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LayoutLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[1173];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 40: 
          { 
  cat.debug( "Format off" );
  yybegin( OFF );
  return "__";
 }
        case 95: break;
        case 34: 
          { 
  cat.debug( "tablerowend" );
  return "</tr><tr>";
 }
        case 96: break;
        case 9: 
        case 13: 
        case 14: 
        case 15: 
        case 17: 
        case 18: 
        case 19: 
        case 25: 
        case 33: 
        case 37: 
          { 
  cat.debug( ". (" + yytext() + ")" );
  return yytext();
 }
        case 97: break;
        case 84: 
          { 
  cat.debug( "@@@@{newline} entering PRE" );
  yybegin( PRE );
  return "<pre>";
 }
        case 98: break;
        case 48: 
          { 
  cat.debug( "Format on" );
  yybegin( NORMAL );
  return "__";
 }
        case 99: break;
        case 26: 
        case 27: 
        case 28: 
          { 
  cat.debug( "PRE, EXTERNAL {whitespace}" );
  return yytext();
 }
        case 100: break;
        case 81: 
          { 
  cat.debug( "table start" );
  yybegin( TABLE );
  return "<table class=\"wikitable\" border=\"1\"><tr>";
 }
        case 101: break;
        case 10: 
        case 20: 
        case 23: 
          { 
  cat.debug( "{newline}" );
  StringBuffer buffer = new StringBuffer();
  for( int i = 0; i < Environment.getIntValue( Environment.PROP_PARSER_NEW_LINE_BREAKS ); i++ )
    buffer.append( "<br/>" );
  buffer.append( "\n" );
  return buffer.toString();
 }
        case 102: break;
        case 67: 
          { 
  cat.debug( "tablecell" );
  String text = yytext();
  StringBuffer buffer = new StringBuffer();
  buffer.append( "<td>" );
  buffer.append( text.substring( 0, text.length() - 2 ) );
  buffer.append( "</td>" );
  return buffer.toString();
 }
        case 103: break;
        case 11: 
        case 12: 
        case 16: 
        case 21: 
        case 22: 
        case 24: 
        case 30: 
        case 31: 
        case 32: 
        case 35: 
        case 36: 
          { 
  String text = yytext();
  StringBuffer buffer = new StringBuffer();
  for( int i = 0; i < text.length(); i++ ){
    buffer.append( (int)text.charAt(i) );
  }
  cat.debug( "{whitespace} " + buffer.toString() );
  return " ";
 }
        case 104: break;
        case 79: 
          { 
  cat.debug( "{hr}" );
  return "\n<hr>\n";
 }
        case 105: break;
        case 29: 
          { 
  cat.debug( "end of list" );
  yybegin( NORMAL );
  StringBuffer buffer = new StringBuffer();
  for( int i = listLevel; i > 0; i-- ){
    buffer.append( "</li>" );
    if( ordered )
      buffer.append( "</ol>" );
    else
      buffer.append( "</ul>" );
    buffer.append("\n" );
  }
  return buffer.toString();
 }
        case 106: break;
        case 83: 
          { 
  cat.debug( "external" );
  yybegin( EXTERNAL );
  return yytext();
 }
        case 107: break;
        case 92: 
          { 
  cat.debug( "table end" );
  yybegin( NORMAL );
  String text = yytext().trim();
  StringBuffer buffer = new StringBuffer();
  buffer.append( "<td>" );
  buffer.append( text.substring( 0, text.indexOf("##") ) );
  buffer.append( "</td>" );
  buffer.append( "</tr></table>\n" );
  return buffer.toString();
 }
        case 108: break;
        case 49: 
          { 
  cat.debug( "{newline}x2 leaving pre" );
	yybegin( NORMAL );
  return "</pre>\n";
 }
        case 109: break;
        case 71: 
          { 
  yybegin( LIST );
  return getListEntry(yytext().trim());
 }
        case 110: break;
        case 74: 
          { 
  return getListSingleEntry(yytext());
 }
        case 111: break;
        case 89: 
          { 
  cat.debug( "external end");
  yybegin( NORMAL );
  return yytext();
 }
        case 112: break;
        case 62: 
          { 

  cat.debug( "escaped double backslash" );
  return "\\__";
 }
        case 113: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
              {     cat.debug( "Ending at list level: " + listLevel );
    if( yy_lexical_state == LIST ){
      yybegin( NORMAL );
      StringBuffer buffer = new StringBuffer();
      for( int i = listLevel; i > 0; i-- ){
        buffer.append( "</li>" );
        if( ordered )
          buffer.append( "</ol>" );
        else
          buffer.append( "</ul>" );
        buffer.append("\n" );
      }
    return buffer.toString();
    }
    if( yy_lexical_state == TABLE ){
      yybegin( NORMAL );
      return "</tr></table>";
    }

	return null;
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
