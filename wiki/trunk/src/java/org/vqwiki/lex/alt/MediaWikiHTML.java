/* The following code was generated by JFlex 1.3.5 on 6/15/06 12:07 PM */

package org.vqwiki.lex.alt;

/*
 * This class adds paragraph tags as appropriate.
 *   
 *
 * @author W. Ryan Holliday
 */

import java.util.Stack;
import org.apache.log4j.Logger;
import org.vqwiki.WikiBase;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 6/15/06 12:07 PM from the specification file
 * <tt>file:/E:/code/workspace/vqwiki/branches/ryan/vqwiki/src/lex/alt/mediawiki-html.jflex</tt>
 */
public class MediaWikiHTML implements org.vqwiki.lex.Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;
  final public static int NONPARAGRAPH = 6;
  final public static int P = 4;
  final public static int NORMAL = 2;

  /**
   * YY_LEXSTATE[l] is the state in the DFA for the lexical state l
   * YY_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private final static int YY_LEXSTATE[] = { 
     0,  0,  1,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\4\1\2\1\0\1\4\1\1\22\0\1\26\16\0\1\22"+
    "\1\0\1\16\1\16\1\16\1\16\1\16\6\0\1\3\1\0\1\23"+
    "\42\0\1\6\1\7\1\0\1\12\1\11\1\27\1\0\1\15\1\13"+
    "\2\0\1\10\1\0\1\25\1\21\1\17\1\0\1\20\1\24\1\5"+
    "\1\21\1\14\uff89\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    24,    48,    72,    96,     0,   120,     0,   144,     0, 
      168,   192,   216,   240,   264,   288,   312,   336,   360,   384, 
      408,   432,   456,   480,   504,   216,     0,   528,   552,   576, 
      600,   624,   648,     0,   672,   696,   720,   744,   768,   792, 
      816,   840,   864,   888,   912,   936,   960,   984,  1008,  1032, 
     1056,  1080,  1104,  1128,  1152,  1176,  1200,  1224,  1248,  1272, 
     1296,  1320,     0,  1344,  1368,  1392,  1416,  1440,     0,  1464, 
     1488,  1512,  1536,  1560,  1584
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\30\0\1\6\1\7\1\10\1\11\1\10\21\6\1\10"+
    "\1\6\1\12\1\7\1\10\1\13\24\12\1\6\1\14"+
    "\1\15\1\16\1\10\21\6\1\10\2\6\1\7\1\10"+
    "\1\17\1\10\21\6\1\10\1\6\2\0\1\10\32\0"+
    "\1\20\4\0\1\21\2\0\1\22\1\0\1\23\1\0"+
    "\1\24\1\25\1\0\1\26\10\0\1\20\1\27\1\30"+
    "\2\0\1\21\1\30\1\0\1\22\1\0\1\23\1\0"+
    "\1\24\1\25\1\0\1\26\4\0\1\31\1\32\26\0"+
    "\1\31\1\33\32\0\1\34\4\0\1\21\2\0\1\22"+
    "\1\0\1\23\1\0\1\24\1\35\1\0\1\26\10\0"+
    "\1\36\4\0\1\21\2\0\1\22\1\0\1\23\1\0"+
    "\1\24\1\37\1\0\1\26\11\0\1\40\3\0\1\41"+
    "\25\0\1\42\2\0\1\43\32\0\1\42\31\0\1\44"+
    "\17\0\1\42\24\0\1\45\4\0\1\46\2\0\1\47"+
    "\1\0\1\50\1\0\1\51\2\0\1\52\22\0\1\53"+
    "\36\0\1\54\24\0\1\12\6\0\1\33\33\0\1\40"+
    "\26\0\1\55\30\0\1\40\3\0\1\56\22\0\1\57"+
    "\4\0\1\60\2\0\1\61\1\0\1\62\1\0\1\63"+
    "\2\0\1\64\12\0\1\65\20\0\23\41\1\66\4\41"+
    "\14\0\1\42\24\0\1\42\24\0\1\67\3\0\1\70"+
    "\25\0\1\71\2\0\1\72\32\0\1\71\31\0\1\73"+
    "\17\0\1\71\36\0\1\74\16\0\1\75\36\0\1\76"+
    "\24\0\1\70\15\0\23\56\1\77\4\56\6\0\1\100"+
    "\3\0\1\70\25\0\1\101\2\0\1\102\32\0\1\101"+
    "\31\0\1\103\17\0\1\101\36\0\1\104\20\0\1\44"+
    "\17\0\1\105\3\0\24\105\7\0\1\106\43\0\1\42"+
    "\27\0\1\66\20\0\1\71\24\0\1\71\24\0\1\107"+
    "\46\0\1\42\22\0\1\110\16\0\1\111\43\0\1\77"+
    "\20\0\1\101\24\0\1\101\24\0\1\112\31\0\1\73"+
    "\44\0\1\71\13\0\1\113\26\0\1\103\44\0\1\101"+
    "\31\0\1\12";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     8,  0,  0,  0,  0,  9,  1,  9,  1,  9,  1,  1,  1,  1,  1,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  9,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    protected static Logger log = Logger.getLogger(MediaWikiHTML.class.getName());
    /** Member variable used to keep track of the state history for the lexer. */
    protected Stack states = new Stack();
    protected String virtualWiki;

    /**
     * Begin a new state and store the old state onto the stack.
     */
    protected void beginState(int state) {
        // store current state
        Integer current = new Integer(yystate());
        states.push(current);
        // switch to new state
        yybegin(state);
    }

    /**
     * End processing of a state and switch to the previous state.
     */
    protected void endState() {
        // revert to previous state
        int next = ((Integer)states.pop()).intValue();
        yybegin(next);
    }
    
    /**
     *
     */
    public void setVirtualWiki(String vWiki) {
        this.virtualWiki = vWiki;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MediaWikiHTML(java.io.Reader in) {
      yybegin(NORMAL);
    states.add(new Integer(yystate()));
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public MediaWikiHTML(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[1608];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 86) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 68: 
          { 
    log.debug("paragraphstart: " + yytext() + " (" + yystate() + ")");
    beginState(P);
    // start paragraph, then rollback to allow normal processing
    yypushback(1);
    return yytext() + "<p>";
 }
        case 76: break;
        case 33: 
          { 
    log.debug("nonparagraphstart: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    if (yystate() == P) {
        output.append("</p>");
        endState();
    }
    beginState(NONPARAGRAPH);
    return output.toString() + yytext();
 }
        case 77: break;
        case 24: 
        case 25: 
        case 26: 
          { 
    log.debug("end of paragraph: " + yytext() + " (" + yystate() + ")");
    endState();
    return "</p>" + yytext();
 }
        case 78: break;
        case 62: 
          { 
    log.debug("nonparagraphend: " + yytext() + " (" + yystate() + ")");
    endState();
    if (yystate() != NONPARAGRAPH) {
        // if not non-paragraph, roll back to allow potential paragraph start
        yypushback(yytext().length());
    }
    return yytext();
 }
        case 79: break;
        case 9: 
          { 
    log.debug("paragraphstart2: " + yytext() + " (" + yystate() + ")");
    beginState(P);
    // start paragraph, then rollback to allow normal processing
    yypushback(yytext().length());
    return "<p>";
 }
        case 80: break;
        case 5: 
        case 8: 
        case 10: 
        case 13: 
        case 14: 
          { 
    log.debug("default: " + yytext() + " (" + yystate() + ")");
    return yytext();
 }
        case 81: break;
        case 6: 
        case 7: 
        case 11: 
        case 12: 
          { 
    log.debug("{whitespace}: " + yytext() + " (" + yystate() + ")");
    return yytext();
 }
        case 82: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
              {     StringBuffer output = new StringBuffer();
    if (yystate() == P) {
        endState();
        output.append("</p>");
    }
    return (output.length() == 0) ? null : output.toString();
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
