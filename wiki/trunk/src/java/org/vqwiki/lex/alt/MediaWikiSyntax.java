/* The following code was generated by JFlex 1.3.5 on 6/15/06 11:27 AM */

package org.vqwiki.lex.alt;

/*
 * This class implements the MediaWiki syntax (http://meta.wikimedia.org/wiki/Help:Editing).
 * It will also escape any HTML tags that have not been specifically allowed to be
 * present.
 * 
 * Currently supported syntax includes:
 *
 *   Unordered lists: *
 *   Ordered lists: #
 *   Definition lists: ;:
 *   Indents: :
 *   Italics: ''
 *   Bold: '''
 *   h1 heading: =text=
 *   h2 heading: ==text==
 *   h3 level heading: ===text===
 *   h4 level heading: ====text====
 *   Breaking line: ----
 *   Tables: {| |- ! | |}
 *   <nowiki>
 *   __NOTOC__
 *
 * Not yet implemented:
 *
 *   <math>
 *
 * To do:
 *
 *
 * @author W. Ryan Holliday
 */

import java.net.URLEncoder;
import java.util.Hashtable;
import java.util.Stack;
import org.apache.log4j.Logger;
import org.vqwiki.Environment;
import org.vqwiki.WikiBase;
import org.vqwiki.servlets.WikiServlet;
import org.vqwiki.utils.JSPUtils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 6/15/06 11:27 AM from the specification file
 * <tt>file:/E:/code/workspace/vqwiki/trunk/vqwiki/src/lex/alt/mediawiki-syntax.jflex</tt>
 */
public class MediaWikiSyntax implements org.vqwiki.lex.Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int NOWIKI = 14;
  final public static int LIST = 12;
  final public static int NORMAL = 2;
  final public static int TH = 8;
  final public static int TABLE = 4;
  final public static int YYINITIAL = 0;
  final public static int TD = 6;
  final public static int PRE = 16;
  final public static int TC = 10;

  /**
   * YY_LEXSTATE[l] is the state in the DFA for the lexical state l
   * YY_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private final static int YY_LEXSTATE[] = { 
     0,  0,  1,  2,  1,  3,  4,  3,  5,  6,  1,  3,  7,  8,  9,  9, 
    10, 10
  };

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\61\1\2\1\0\1\3\1\1\22\0\1\21\1\46\1\0"+
    "\1\12\2\0\1\6\1\11\2\0\1\12\1\52\1\0\1\7\1\0"+
    "\1\20\12\0\1\60\1\12\1\4\1\10\1\5\2\0\1\34\1\25"+
    "\1\45\1\30\1\24\2\0\1\42\1\31\1\0\1\37\1\41\1\0"+
    "\1\35\1\27\1\22\1\0\1\23\1\33\1\44\1\40\1\32\4\0"+
    "\1\53\1\0\1\54\1\0\1\43\1\0\1\63\1\25\1\26\1\30"+
    "\1\66\1\65\1\0\1\55\1\16\1\0\1\17\1\64\1\62\1\13"+
    "\1\14\1\56\1\0\1\23\1\57\1\36\1\40\1\32\1\15\3\0"+
    "\1\47\1\50\1\51\uff82\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    55,   110,   165,   220,   275,   330,   385,   440,   495, 
      550,     0,   605,     0,   660,     0,     0,   715,   770,   825, 
      880,   935,   990,  1045,  1100,  1155,  1210,  1265,  1320,  1375, 
     1430,  1485,  1540,  1595,  1650,     0,  1650,   715,  1705,   770, 
      825,   880,   935,   990,  1760,  1815,  1870,  1925,  1980,  2035, 
     2090,  2145,  2200,  2255,  2310,  2365,  2420,  2475,  2530,  2585, 
     2640,  2695,     0,  2750,  2805,  2860,  2915,  2970,  3025,  3080, 
     3135,  3190,  3245,     0,  3300,     0,     0,     0,     0,  3355, 
     3410,  3465,  3520,     0,  3575,  3630,  3685,  3740,  3795,  3850, 
     3905,  3960,     0,  4015,  4070,  4125,  4180,  4235,  4290,  4345, 
     4400,  4455,  4510,  4565,  4620,     0,  4675,     0,  4730,  4785, 
     4840,  4895,  4950,  5005,  5060,     0,  5115,  5170,  5225,     0, 
     5280,  3245,  5335,  5390,     0,  5445,  5500,  5555,     0,     0, 
     5610,  5665,  5720,  5775,  5830,  5885,  5940,  5995,  6050,  6105, 
        0,  6160,     0,  6215,  6270,  6325,  6380,  6435,  6490,  6545, 
        0,  6600,     0,  6655,  6710,     0,     0,  6765,  6820,  6875, 
     6930,  6985,  7040,  7095,     0,  7150,  7205,  7260,     0,  7315, 
     7370,  7425,  7480,  7535,  7590,  7645,  7700,  7755,     0,     0, 
     7810,     0,     0,     0,  7865,     0,  7920,  7975,  8030,     0, 
        0,  8085,  8140,  8195,  4785,     0,  8250,  8305,  8360,  8415, 
     8470,  8525,  8580,  8635,  8690,  8745,     0,  8800,  8855,     0, 
        0,  8910,     0,     0,  8965,  9020,  9075,  9130,  9185,  9240, 
        0,  9295,  9350,  9405,  9460,     0,  9515,     0,     0,  9570, 
     9625,  9680,     0,  9735,     0,  9790,  9240,  9845,  9900,  9955, 
    10010,     0, 10065,     0,     0, 10120, 10175, 10230, 10285, 10340, 
        0,     0,     0, 10395, 10450,     0, 10505, 10560, 10615, 10670, 
        0, 10725, 10780, 10835,     0
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\67\0\1\14\1\15\2\16\1\17\1\20\1\21\2\14"+
    "\1\22\7\14\1\16\21\14\1\23\7\14\1\24\1\14"+
    "\1\25\3\14\1\16\1\26\2\14\1\27\2\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\30\1\31\1\22\1\32"+
    "\6\14\1\16\21\14\1\23\3\14\1\33\3\14\1\24"+
    "\1\14\1\25\2\14\1\32\1\16\1\26\2\14\1\27"+
    "\2\14\1\15\2\16\1\17\1\20\1\21\2\14\1\22"+
    "\1\32\6\14\1\16\21\14\1\23\2\14\1\34\1\33"+
    "\1\35\2\14\1\24\1\14\1\25\2\14\1\32\1\16"+
    "\1\26\2\14\1\27\2\14\1\15\2\16\1\17\1\20"+
    "\1\21\2\14\1\22\7\14\1\16\21\14\1\23\4\14"+
    "\1\36\2\14\1\24\1\14\1\25\3\14\1\16\1\26"+
    "\2\14\1\27\2\14\1\15\2\16\1\17\1\20\1\21"+
    "\2\14\1\22\7\14\1\16\21\14\1\23\2\14\1\37"+
    "\1\14\1\40\2\14\1\24\1\14\1\25\3\14\1\16"+
    "\1\26\2\14\1\27\2\14\1\15\2\16\1\17\1\20"+
    "\1\21\2\14\1\22\1\32\6\14\1\16\21\14\1\23"+
    "\2\14\1\41\1\33\1\42\2\14\1\24\1\14\1\25"+
    "\2\14\1\32\1\16\1\26\2\14\1\27\2\14\1\15"+
    "\2\16\1\43\1\20\1\21\2\14\1\22\7\14\1\16"+
    "\21\14\1\23\7\14\1\24\1\14\1\25\3\14\1\16"+
    "\1\26\2\14\1\27\1\14\1\44\1\15\1\16\1\44"+
    "\1\45\4\44\1\46\1\47\30\44\1\50\7\44\1\51"+
    "\1\44\1\52\2\44\1\47\1\44\1\53\2\44\1\54"+
    "\1\44\1\14\1\15\2\16\1\55\1\20\1\21\12\14"+
    "\1\16\37\14\1\16\6\14\1\15\2\16\1\56\1\20"+
    "\1\21\12\14\1\16\37\14\1\16\5\14\2\0\1\16"+
    "\77\0\1\57\2\0\1\60\1\0\1\61\1\62\1\63"+
    "\2\0\1\64\1\65\1\0\1\66\1\60\1\0\1\67"+
    "\2\0\1\70\1\0\1\71\3\0\1\70\1\65\1\72"+
    "\7\0\1\63\1\67\20\0\1\73\120\0\1\74\23\0"+
    "\53\75\1\76\1\77\12\75\36\0\1\100\113\0\1\101"+
    "\21\0\1\102\17\0\1\103\37\0\1\104\57\0\2\105"+
    "\1\0\5\105\1\106\56\105\12\0\1\32\45\0\1\32"+
    "\56\0\1\107\16\0\1\110\2\0\1\110\1\0\2\110"+
    "\1\0\36\110\3\0\16\110\1\111\2\112\1\111\1\112"+
    "\2\111\1\113\37\111\2\112\1\114\1\115\14\111\50\0"+
    "\1\116\64\0\1\117\70\0\1\117\16\0\1\110\2\0"+
    "\1\110\1\0\2\110\1\0\36\110\1\117\2\0\16\110"+
    "\1\111\2\112\1\111\1\112\2\111\1\113\37\111\1\112"+
    "\1\117\1\114\1\115\14\111\13\0\1\57\2\0\1\60"+
    "\1\0\1\61\1\62\1\63\2\0\1\64\1\65\1\0"+
    "\1\66\1\60\1\0\1\67\2\0\1\70\1\0\1\71"+
    "\3\0\1\70\1\65\10\0\1\63\1\67\21\0\1\47"+
    "\45\0\1\47\26\0\1\120\61\0\1\57\4\0\1\121"+
    "\1\122\61\0\1\123\57\0\1\124\13\0\1\60\63\0"+
    "\1\125\2\0\1\61\3\0\1\126\1\127\1\0\1\130"+
    "\1\125\1\0\1\131\2\0\1\132\1\0\1\133\3\0"+
    "\1\132\1\127\11\0\1\131\25\0\1\60\1\0\1\61"+
    "\1\62\1\63\2\0\1\64\1\65\1\0\1\66\1\60"+
    "\1\0\1\67\2\0\1\70\1\0\1\71\3\0\1\70"+
    "\1\65\10\0\1\63\1\67\32\0\1\134\50\0\1\135"+
    "\13\0\1\136\1\0\1\137\57\0\1\140\12\0\1\140"+
    "\55\0\1\141\12\0\1\141\57\0\1\142\13\0\1\143"+
    "\1\0\1\144\3\0\1\143\11\0\1\142\33\0\1\145"+
    "\4\0\1\146\3\0\1\147\1\0\1\150\3\0\1\151"+
    "\1\0\1\150\10\0\1\151\5\0\1\147\10\0\1\152"+
    "\13\0\1\71\54\0\1\153\70\0\1\154\112\0\1\155"+
    "\31\0\54\75\1\77\12\75\54\76\1\156\12\76\36\0"+
    "\1\157\46\0\1\160\134\0\1\161\60\0\1\162\17\0"+
    "\1\163\57\0\10\105\1\164\56\105\2\165\1\0\5\165"+
    "\1\166\56\165\1\107\1\167\1\170\64\107\1\110\2\0"+
    "\1\110\1\0\2\110\1\0\36\110\2\0\1\171\16\110"+
    "\1\172\2\0\45\172\1\173\16\172\1\113\1\174\1\175"+
    "\64\113\13\0\1\176\74\0\1\121\1\177\33\0\1\177"+
    "\30\0\1\121\1\122\62\0\1\200\56\0\1\201\13\0"+
    "\1\125\52\0\1\202\13\0\1\126\61\0\1\203\12\0"+
    "\1\203\55\0\1\204\12\0\1\204\57\0\1\205\13\0"+
    "\1\206\1\0\1\207\3\0\1\206\11\0\1\205\33\0"+
    "\1\210\4\0\1\211\3\0\1\212\1\0\1\213\3\0"+
    "\1\214\1\0\1\213\10\0\1\214\5\0\1\212\10\0"+
    "\1\215\13\0\1\133\71\0\1\216\41\0\1\216\5\0"+
    "\1\135\13\0\1\136\52\0\1\217\12\0\1\220\1\137"+
    "\75\0\1\221\70\0\1\222\70\0\1\223\26\0\1\223"+
    "\26\0\1\224\65\0\1\225\2\0\1\226\30\0\1\225"+
    "\15\0\1\227\13\0\1\230\52\0\1\231\13\0\1\232"+
    "\72\0\1\233\46\0\1\234\13\0\1\150\52\0\1\235"+
    "\13\0\1\151\54\0\1\236\106\0\1\237\37\0\54\240"+
    "\1\241\12\240\56\0\1\242\74\0\1\243\70\0\1\162"+
    "\60\0\1\244\15\0\1\245\57\0\10\165\1\246\56\165"+
    "\2\247\1\0\5\247\1\250\56\247\2\0\1\170\64\0"+
    "\50\251\1\0\16\251\50\112\1\0\16\112\2\0\1\175"+
    "\100\0\1\252\75\0\1\253\61\0\1\254\100\0\1\255"+
    "\70\0\1\256\70\0\1\257\26\0\1\257\26\0\1\260"+
    "\65\0\1\261\2\0\1\262\30\0\1\261\15\0\1\263"+
    "\13\0\1\210\52\0\1\264\13\0\1\211\72\0\1\265"+
    "\46\0\1\266\13\0\1\213\52\0\1\267\13\0\1\214"+
    "\52\0\1\270\13\0\1\216\52\0\1\217\13\0\1\220"+
    "\71\0\1\271\41\0\1\271\5\0\1\272\13\0\1\273"+
    "\60\0\1\274\21\0\1\274\47\0\1\275\12\0\1\275"+
    "\42\0\1\276\13\0\1\225\52\0\1\277\13\0\1\226"+
    "\45\0\5\230\1\227\12\230\1\0\46\230\5\232\1\231"+
    "\12\232\1\0\46\232\41\0\1\300\22\0\1\300\2\0"+
    "\7\236\1\301\57\236\44\0\1\302\22\0\54\240\1\303"+
    "\12\240\54\0\1\304\71\0\1\162\1\244\44\0\1\305"+
    "\50\0\1\306\46\0\10\165\1\307\56\165\10\247\1\310"+
    "\56\247\2\311\1\0\5\311\1\312\56\311\15\0\1\313"+
    "\75\0\1\314\41\0\1\314\17\0\1\315\73\0\1\316"+
    "\41\0\1\316\5\0\1\317\13\0\1\256\60\0\1\320"+
    "\21\0\1\320\47\0\1\321\12\0\1\321\42\0\1\322"+
    "\13\0\1\261\52\0\1\323\13\0\1\262\106\0\1\324"+
    "\22\0\1\324\7\0\1\325\13\0\1\271\45\0\5\273"+
    "\1\272\12\273\1\0\46\273\5\0\1\326\13\0\1\327"+
    "\64\0\1\330\17\0\1\330\53\0\1\331\41\0\1\331"+
    "\7\236\1\332\57\236\27\0\1\333\53\0\1\162\72\0"+
    "\1\334\56\0\1\335\56\0\10\247\1\336\56\247\10\311"+
    "\1\337\56\311\2\340\1\0\5\340\1\0\56\340\16\0"+
    "\1\341\55\0\1\342\13\0\1\314\63\0\1\343\55\0"+
    "\1\344\13\0\1\316\52\0\1\345\13\0\1\320\64\0"+
    "\1\346\17\0\1\346\53\0\1\347\41\0\1\347\5\327"+
    "\1\326\12\327\1\0\46\327\24\0\1\350\41\0\1\350"+
    "\5\0\1\351\13\0\1\352\45\0\5\236\1\353\1\236"+
    "\1\332\57\236\45\0\1\354\21\0\1\355\2\0\16\355"+
    "\1\0\37\355\1\0\5\355\10\247\1\356\56\247\10\311"+
    "\1\357\56\311\10\340\1\360\56\340\17\0\1\361\54\0"+
    "\1\362\105\0\1\363\41\0\1\363\5\0\1\364\13\0"+
    "\1\347\52\0\1\365\13\0\1\350\45\0\5\352\1\351"+
    "\12\352\1\0\46\352\43\0\1\366\33\0\1\367\56\0"+
    "\10\311\1\370\56\311\10\340\1\371\56\340\16\0\1\372"+
    "\55\0\1\373\13\0\1\363\110\0\1\374\33\0\1\375"+
    "\56\0\10\311\1\376\56\311\10\340\1\377\56\340\5\0"+
    "\1\u0100\71\0\1\u0101\56\0\10\340\1\u0102\56\340\10\0"+
    "\1\u0103\56\0\10\340\1\u0104\56\340\10\0\1\u0105\66\0"+
    "\1\u0106\66\0\1\u0107\66\0\1\u0108\66\0\1\u0109\56\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  1,  9,  1,  9, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  9,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  9,  0,  9,  9,  9,  9,  0, 
     0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  1,  0,  0, 
     0,  0,  0,  9,  0,  0,  1,  9,  0,  0,  0,  1,  9,  0,  0,  0, 
     9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0, 
     0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  0,  9,  9,  0,  0,  0, 
     1,  0,  0,  0,  9,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  9,  9,  0,  9,  9,  9,  0,  9,  0,  0,  0,  9,  9,  0, 
     0,  0,  0,  9,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  9,  9,  0,  9,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0, 
     0,  9,  0,  9,  9,  0,  0,  0,  9,  0,  9,  0,  1,  1,  0,  0, 
     0,  9,  0,  9,  9,  0,  1,  0,  0,  0,  9,  9,  9,  1,  0,  9, 
     1,  0,  1,  1,  9,  1,  1,  1,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    protected static Logger logger = Logger.getLogger(MediaWikiSyntax.class.getName());
    /** Member variable used to keep track of the state history for the lexer. */
    protected Stack states = new Stack();
    protected String virtualWiki;
    protected MakeTableOfContents toc = new MakeTableOfContents();
    protected boolean allowHtml = false;
    protected boolean wikibold = false;
    protected boolean wikiitalic = false;
    protected boolean nowiki = false;
    protected Stack listOpenStack = new Stack();
    protected Stack listCloseStack = new Stack();
    protected static Hashtable listOpenHash = new Hashtable();
    protected static Hashtable listCloseHash = new Hashtable();
    protected static Hashtable listItemOpenHash = new Hashtable();

    static {
        listOpenHash.put("*", "<ul>");
        listOpenHash.put("#", "<ol>");
        listOpenHash.put(":", "<dl>");
        listOpenHash.put(";", "<dl>");
        listItemOpenHash.put("*", "<li>");
        listItemOpenHash.put("#", "<li>");
        listItemOpenHash.put(":", "<dd>");
        listItemOpenHash.put(";", "<dt>");
        listCloseHash.put("<ul>", "</ul>");
        listCloseHash.put("<ol>", "</ol>");
        listCloseHash.put("<dl>", "</dl>");
        listCloseHash.put("<li>", "</li>");
        listCloseHash.put("<dd>", "</dd>");
        listCloseHash.put("<dt>", "</dt>");
    }
    
    /**
     *
     */
    protected boolean allowHtml() {
        return (allowHtml && yystate() != PRE && yystate() != NOWIKI);
    }

    /**
     * Begin a new state and store the old state onto the stack.
     */
    protected void beginState(int state) {
        // store current state
        Integer current = new Integer(yystate());
        states.push(current);
        // switch to new state
        yybegin(state);
    }
    
    /**
     *
     */
    protected String closeList() {
        StringBuffer output = new StringBuffer();
        while (listOpenStack.size() > 0) {
            listOpenStack.pop();
            output.append(listCloseStack.pop());
        }
        return output.toString();
    }
    
    /**
     *
     */
    protected String closeTable(int currentState) {
        String output = "";
        if (yystate() == TC) output = "</caption>";
        if (yystate() == TH) output = "</th>";
        if (yystate() == TD) output = "</td>";
        if ((yystate() == TC || yystate() == TH || yystate() == TD) && yystate() != currentState) endState();
        return output;
    }

    /**
     * End processing of a state and switch to the previous state.
     */
    protected void endState() {
        // revert to previous state
        int next = ((Integer)states.pop()).intValue();
        yybegin(next);
    }
    
    /**
     *
     */
    protected String listItem(String text) {
        text = text.trim();
        StringBuffer output = new StringBuffer();
        // build a stack of html tags based on current values passed to lexer
        Stack currentOpenStack = new Stack();
        for (int i=0; i < text.length(); i++) {
            String tag = "" + text.charAt(i);
            String listOpenTag = (String)listOpenHash.get(tag);
            String listItemOpenTag = (String)listItemOpenHash.get(tag);
            if (listOpenTag == null || listItemOpenTag == null) {
                logger.error("Unknown list tag " + tag);
                continue;
            }
            currentOpenStack.push(listOpenTag);
            currentOpenStack.push(listItemOpenTag);
        }
        // if list was previously open to a greater depth, close the old list
        while (listOpenStack.size() > currentOpenStack.size()) {
            listOpenStack.pop();
            output.append(listCloseStack.pop());
        }
        // if continuing the same list, process normally
        if (currentOpenStack.equals(listOpenStack)) {
            // get last tag in current stack
            String currentOpenTag = (String)currentOpenStack.elementAt(currentOpenStack.size() - 1);
            String listOpenTag = (String)listOpenStack.elementAt(listOpenStack.size() - 1);
            String closeTag = (String)listCloseHash.get(listOpenTag);
            output.append(closeTag);
            output.append(currentOpenTag);
            return output.toString();
        }
        // look for differences in the old list stack and the new list stack
        int pos = 0;
        while (pos < listOpenStack.size()) {
            if (!listOpenStack.elementAt(pos).equals(currentOpenStack.elementAt(pos))) {
                break;
            }
            pos++;
        }
        // if any differences found process them
        while (listOpenStack.size() > pos) {
            listOpenStack.pop();
            output.append(listCloseStack.pop());
        }
        // continue processing differences
        for (int i=pos; i < currentOpenStack.size(); i++) {
            String currentOpenTag = (String)currentOpenStack.elementAt(i);
            String currentCloseTag = (String)listCloseHash.get(currentOpenTag);
            listOpenStack.push(currentOpenTag);
            listCloseStack.push(currentCloseTag);
            output.append(currentOpenTag);
        }
        return output.toString();
    }
    
    /**
     *
     */
    protected String updateToc(String name, String text, int level) {
        String output = "";
        if (this.toc.getStatus() == MakeTableOfContents.STATUS_TOC_UNINITIALIZED) {
            output = MakeTableOfContents.TOC_INSERT_TAG;
        }
        this.toc.addEntry(name, text, level);
        return output;
    }
    
    /**
     *
     */
    public void setVirtualWiki(String vWiki) {
        this.virtualWiki = vWiki;
    }
    
    /**
     *
     */
    public void setTOC(MakeTableOfContents toc) {
        this.toc = toc;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MediaWikiSyntax(java.io.Reader in) {
      allowHtml = Environment.getBooleanValue(Environment.PROP_PARSER_ALLOW_HTML);
    yybegin(NORMAL);
    states.add(new Integer(yystate()));
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public MediaWikiSyntax(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[10890];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 115: 
          { 
    logger.debug("h1: " + yytext() + " (" + yystate() + ")");
    String tagText = yytext().substring(1, yytext().indexOf("=", 1)).trim();
    String tagName = JSPUtils.encodeURL(tagText);
    String output = updateToc(tagName, tagText, 1);
    return output + "<a name=\"" + tagName + "\"></a><h1>" + tagText + "</h1>";
 }
        case 266: break;
        case 259: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
          { 
    logger.debug("h5: " + yytext() + " (" + yystate() + ")");
    String tagText = yytext().substring(5, yytext().indexOf("=====", 5)).trim();
    String tagName = JSPUtils.encodeURL(tagText);
    String output = updateToc(tagName, tagText, 5);
    return output + "<a name=\"" + tagName + "\"></a><h5>" + tagText + "</h5>";
 }
        case 267: break;
        case 253: 
        case 256: 
        case 258: 
        case 260: 
          { 
    logger.debug("h4: " + yytext() + " (" + yystate() + ")");
    String tagText = yytext().substring(4, yytext().indexOf("====", 4)).trim();
    String tagName = JSPUtils.encodeURL(tagText);
    String output = updateToc(tagName, tagText, 4);
    return output + "<a name=\"" + tagName + "\"></a><h4>" + tagText + "</h4>";
 }
        case 268: break;
        case 83: 
          { 
    logger.debug("htmlitalicstart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "<i>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 269: break;
        case 140: 
          { 
    logger.debug("htmlunderlineend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</u>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 270: break;
        case 15: 
          { 
    logger.debug("htmltagclose: " + yytext() + " (" + yystate() + ")");
    // if html not allowed, escape it
    return (allowHtml()) ? yytext() : "&gt;";
 }
        case 271: break;
        case 164: 
          { 
    logger.debug("hr: " + yytext() + " (" + yystate() + ")");
    return "<hr />\n";
 }
        case 272: break;
        case 160: 
        case 195: 
          { 
    logger.debug("wikilink: " + yytext() + " (" + yystate() + ")");
    return MediaWikiUtil.buildWikiLink(yytext(), virtualWiki);
 }
        case 273: break;
        case 77: 
          { 
    logger.debug("tablecells: " + yytext() + " (" + yystate() + ")");
    return "</td><td>";
 }
        case 274: break;
        case 11: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 26: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 33: 
          { 
    logger.debug("default: " + yytext() + " (" + yystate() + ")");
    return yytext();
 }
        case 275: break;
        case 78: 
          { 
    logger.debug("tableheadings: " + yytext() + " (" + yystate() + ")");
    return "</th><th>";
 }
        case 276: break;
        case 38: 
          { 
    logger.debug("list item: " + yytext() + " (" + yystate() + ")");
    // process list item
    return listItem(yytext());
 }
        case 277: break;
        case 105: 
          { 
    logger.debug("htmlunderlinestart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "<u>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 278: break;
        case 255: 
          { 
    logger.debug("nowikiend: " + yytext() + " (" + yystate() + ")");
    endState();
    return "";
 }
        case 279: break;
        case 250: 
          { 
    logger.debug("htmlstrikeend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</strike>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 280: break;
        case 243: 
          { 
    logger.debug("htmltableend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</table>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 281: break;
        case 237: 
        case 246: 
        case 252: 
          { 
    logger.debug("h3: " + yytext() + " (" + yystate() + ")");
    String tagText = yytext().substring(3, yytext().indexOf("===", 3)).trim();
    String tagName = JSPUtils.encodeURL(tagText);
    String output = updateToc(tagName, tagText, 3);
    return output + "<a name=\"" + tagName + "\"></a><h3>" + tagText + "</h3>";
 }
        case 282: break;
        case 236: 
          { 
    logger.debug("htmllinkraw: " + yytext() + " (" + yystate() + ")");
    return MediaWikiUtil.buildHtmlLinkRaw(yytext());
 }
        case 283: break;
        case 228: 
          { 
    logger.debug("htmlspanend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</span>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 284: break;
        case 227: 
          { 
    logger.debug("htmlcodeend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</code>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 285: break;
        case 210: 
          { 
    logger.debug("htmlsubend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</sub>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 286: break;
        case 209: 
          { 
    logger.debug("htmlsupend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</sup>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 287: break;
        case 206: 
          { 
    logger.debug("htmldivend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</div>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 288: break;
        case 198: 
        case 220: 
          { 
    logger.debug("h2: " + yytext() + " (" + yystate() + ")");
    String tagText = yytext().substring(2, yytext().indexOf("==", 2)).trim();
    String tagName = JSPUtils.encodeURL(tagText);
    String output = updateToc(tagName, tagText, 2);
    return output + "<a name=\"" + tagName + "\"></a><h2>" + tagText + "</h2>";
 }
        case 289: break;
        case 185: 
          { 
    logger.debug("htmldivstart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? yytext() : MediaWikiUtil.escapeHtml(yytext());
 }
        case 290: break;
        case 182: 
          { 
    logger.debug("htmlthend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</th>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 291: break;
        case 181: 
          { 
    logger.debug("htmlttend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</tt>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 292: break;
        case 62: 
        case 109: 
          { 
    logger.debug("htmllink: " + yytext() + " (" + yystate() + ")");
    return MediaWikiUtil.buildHtmlLink(yytext());
 }
        case 293: break;
        case 58: 
          { 
    logger.debug("italic: " + yytext() + " (" + yystate() + ")");
    wikiitalic = !wikiitalic;
    return (wikiitalic) ? "<i>" : "</i>";
 }
        case 294: break;
        case 12: 
        case 13: 
          { 
    logger.debug("{whitespace}: " + yytext() + " (" + yystate() + ")");
    return yytext();
 }
        case 295: break;
        case 14: 
        case 34: 
        case 44: 
        case 45: 
          { 
    logger.debug("htmltagopen: " + yytext() + " (" + yystate() + ")");
    // if html not allowed, escape it
    return (allowHtml()) ? yytext() : "&lt;";
 }
        case 296: break;
        case 16: 
          { 
    logger.debug("htmltagopen: " + yytext() + " (" + yystate() + ")");
    // if html not allowed, escape it
    return (allowHtml()) ? yytext() : "&amp;";
 }
        case 297: break;
        case 107: 
          { 
    logger.debug("bold: " + yytext() + " (" + yystate() + ")");
    wikibold = !wikibold;
    return (wikibold) ? "<b>" : "</b>";
 }
        case 298: break;
        case 142: 
          { 
    logger.debug("htmlbreak: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "<br />" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 299: break;
        case 150: 
          { 
    logger.debug("htmltrstart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? yytext() : MediaWikiUtil.escapeHtml(yytext());
 }
        case 300: break;
        case 152: 
          { 
    logger.debug("htmltdstart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? yytext() : MediaWikiUtil.escapeHtml(yytext());
 }
        case 301: break;
        case 156: 
          { 
    logger.debug("htmlthstart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? yytext() : MediaWikiUtil.escapeHtml(yytext());
 }
        case 302: break;
        case 178: 
          { 
    logger.debug("htmltrend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</tr>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 303: break;
        case 179: 
          { 
    logger.debug("htmltdend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</td>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 304: break;
        case 234: 
          { 
    logger.debug("htmlcomment: " + yytext() + " (" + yystate() + ")");
    // remove comment
    return "";
 }
        case 305: break;
        case 251: 
          { 
    logger.debug("notoc: " + yytext() + " (" + yystate() + ")");
    this.toc.setStatus(MakeTableOfContents.STATUS_NO_TOC);
    return "";
 }
        case 306: break;
        case 241: 
          { 
    logger.debug("nowikistart: " + yytext() + " (" + yystate() + ")");
    beginState(NOWIKI);
    return "";
 }
        case 307: break;
        case 123: 
        case 124: 
          { 
    logger.debug("tablerow: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    // if a column was already open, close it
    output.append(closeTable(TABLE));
    output.append("</tr>");
    if (yytext().length() > 2) {
        output.append("<tr ").append(yytext().substring(2).trim()).append(">");
    } else {
        output.append("<tr>");
    }
    return output.toString();
 }
        case 308: break;
        case 75: 
          { 
    logger.debug("tableend: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    // if a column was already open, close it
    output.append(closeTable(TABLE));
    // end TABLE state
    endState();
    output.append("</tr></table>\n");
    return output.toString();
 }
        case 309: break;
        case 25: 
          { 
    logger.debug("start of list: " + yytext() + " (" + yystate() + ")");
    // switch to list processing mode
    beginState(LIST);
    yypushback(yylength());
    return "";
 }
        case 310: break;
        case 72: 
        case 73: 
          { 
    logger.debug("tablecell: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    // if a column was already open, close it
    output.append(closeTable(TD));
    if (yystate() != TD) beginState(TD);
    if (yytext().length() > 2) {
        int start = 1;
        int end = yytext().indexOf("|", start+1);
        output.append("<td ").append(yytext().substring(start, end).trim()).append(">");
    } else {
        output.append("<td>");
    }
    // extra character matched by both regular expressions so push it back
    yypushback(1);
    return output.toString();
 }
        case 311: break;
        case 27: 
        case 32: 
        case 168: 
          { 
    logger.debug("tableheading: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    // if a column was already open, close it
    output.append(closeTable(TH));
    if (yystate() != TH) beginState(TH);
    if (yytext().length() > 1) {
        int start = 1;
        int end = yytext().indexOf("|", start+1);
        output.append("<th ").append(yytext().substring(start, end).trim()).append(">");
        // extra character matched by regular expression so push it back
        yypushback(1);
    } else {
        output.append("<th>");
    }
    return output.toString();
 }
        case 312: break;
        case 183: 
          { 
    logger.debug("htmlprestart: " + yytext() + " (" + yystate() + ")");
    if (allowHtml) {
        beginState(PRE);
        return "<pre>";
    }
    return "&lt;pre&gt;";
 }
        case 313: break;
        case 92: 
          { 
    logger.debug("htmlboldstart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "<b>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 314: break;
        case 128: 
          { 
    logger.debug("htmlitalicend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</i>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 315: break;
        case 244: 
          { 
    logger.debug("htmlstrikestart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "<strike>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 316: break;
        case 232: 
          { 
    logger.debug("htmltablestart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? yytext() : MediaWikiUtil.escapeHtml(yytext());
 }
        case 317: break;
        case 213: 
          { 
    logger.debug("htmlspanstart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? yytext() : MediaWikiUtil.escapeHtml(yytext());
 }
        case 318: break;
        case 212: 
          { 
    logger.debug("htmlcodestart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "<code>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 319: break;
        case 190: 
          { 
    logger.debug("htmlsubstart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "<sub>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 320: break;
        case 189: 
          { 
    logger.debug("htmlsupstart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "<sup>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 321: break;
        case 76: 
          { 
    logger.debug("tablecaption: " + yytext() + " (" + yystate() + ")");
    StringBuffer output = new StringBuffer();
    output.append(closeTable(TC));
    beginState(TC);
    output.append("<caption>");
    return output.toString();
 }
        case 322: break;
        case 129: 
          { 
    logger.debug("htmlboldend: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "</b>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 323: break;
        case 155: 
          { 
    logger.debug("htmlttstart: " + yytext() + " (" + yystate() + ")");
    return (allowHtml()) ? "<tt>" : MediaWikiUtil.escapeHtml(yytext());
 }
        case 324: break;
        case 118: 
        case 119: 
          { 
    logger.debug("tablestart: " + yytext() + " (" + yystate() + ")");
    beginState(TABLE);
    return "<table " + yytext().substring(2).trim() + "><tr>";
 }
        case 325: break;
        case 225: 
          { 
    logger.debug("htmlpreend: " + yytext() + " (" + yystate() + ")");
    // state only changes to pre if allowHTML is true, so no need to check here
    endState();
    return "</pre>";
 }
        case 326: break;
        case 35: 
        case 36: 
        case 37: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
          { 
    logger.debug("end of list: " + yytext() + " (" + yystate() + ")");
    // end of list, switch back to normal processing mode
    endState();
    yypushback(yylength());
    return closeList();
 }
        case 327: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
              {     StringBuffer output = new StringBuffer();
    if (wikibold) {
        wikibold = false;
        output.append("</b>");
    }
    if (wikiitalic) {
        wikiitalic = false;
        output.append( "</i>" );
    }
    // close any open list tags
    output.append(closeList());
    // close any open tables
    if (yystate() == TD) {
        output.append("</td>");
        endState();
    }
    if (yystate() == TH) {
        output.append("</th>");
        endState();
    }
    if (yystate() == TC) {
        output.append("</caption>");
        endState();
    }
    if (yystate() == TABLE) {
        output.append("</td>");
        endState();
    }
    return (output.length() == 0) ? null : output.toString();
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
