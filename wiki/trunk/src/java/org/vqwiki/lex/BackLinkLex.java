/* The following code was generated by JFlex 1.3.5 on 6/15/06 12:07 PM */

package org.vqwiki.lex;


/*
Very Quick Wiki - WikiWikiWeb clone
Copyright (C) 2001-2003 Gareth Cronin

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program (gpl.txt); if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

import java.io.*;
import java.util.List;
import java.util.ArrayList;

import org.apache.log4j.Logger;
import org.vqwiki.lex.Lexer;
import org.vqwiki.Environment;
import org.vqwiki.WikiBase;
import org.vqwiki.utils.Utilities;
import org.vqwiki.utils.JSPUtils;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 6/15/06 12:07 PM from the specification file
 * <tt>file:/E:/code/workspace/vqwiki/branches/ryan/vqwiki/src/lex/backlinks.jflex</tt>
 */
public class BackLinkLex implements org.vqwiki.lex.Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;
  final public static int EXTERNAL = 4;
  final public static int PRE = 3;
  final public static int OFF = 2;
  final public static int NORMAL = 1;

  /**
   * Translates characters to character classes
   */
  final private static String yycmap_packed =
	"\11\0\1\3\1\56\2\0\1\3\22\0\1\1\1\0\1\55\13\0"+
	"\1\31\1\53\12\46\1\30\1\0\1\50\1\0\1\27\2\0\1\51"+
	"\1\44\2\51\1\42\1\36\1\34\1\51\1\35\1\37\2\51\1\45"+
	"\1\41\1\51\1\40\12\51\1\10\1\57\1\4\1\0\1\47\1\2"+
	"\1\17\1\43\1\54\1\52\1\24\1\15\1\32\1\12\1\20\1\33"+
	"\1\52\1\21\1\16\1\23\1\22\1\14\1\52\1\60\1\26\1\13"+
	"\2\52\1\25\3\52\1\0\1\11\55\0\1\6\12\0\1\6\4\0"+
	"\1\6\5\0\27\5\1\0\7\5\30\6\1\0\10\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\2\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\2\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\2\5\1\6\1\5\1\6"+
	"\1\5\3\6\2\5\1\6\1\5\1\6\2\5\1\6\3\5\2\6"+
	"\4\5\1\6\2\5\1\6\3\5\3\6\2\5\1\6\2\5\1\6"+
	"\1\5\1\6\1\5\1\6\2\5\1\6\1\5\2\6\1\5\1\6"+
	"\2\5\1\6\3\5\1\6\1\5\1\6\2\5\2\6\1\7\1\5"+
	"\3\6\4\7\1\5\1\7\1\6\1\5\1\7\1\6\1\5\1\7"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\2\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\2\6\1\5\1\7\1\6\1\5\1\6"+
	"\3\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\4\6"+
	"\31\0\140\6\22\7\4\0\14\7\16\0\5\7\11\0\1\7\213\0"+
	"\1\7\13\0\1\5\1\0\3\5\1\0\1\5\1\0\2\5\1\6"+
	"\21\5\1\0\11\5\43\6\1\0\2\6\3\5\3\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\5\6\1\5\1\6\1\0\1\5\1\6\2\5\1\6\4\0"+
	"\60\5\60\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\10\0\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\2\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\0\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\2\0\1\5\1\6\6\0\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\41\0\46\5\2\0\1\7\7\0\47\6"+
	"\110\0\33\7\5\0\3\7\56\0\32\7\5\0\13\7\25\0\12\46"+
	"\4\0\2\7\1\0\143\7\1\0\1\7\17\0\2\7\7\0\2\7"+
	"\12\46\3\7\2\0\1\7\20\0\1\7\1\0\36\7\35\0\3\7"+
	"\60\0\46\7\13\0\1\7\u0152\0\66\7\3\0\1\7\22\0\1\7"+
	"\7\0\12\7\4\0\12\46\25\0\10\7\2\0\2\7\2\0\26\7"+
	"\1\0\7\7\1\0\1\7\3\0\4\7\3\0\1\7\36\0\2\7"+
	"\1\0\3\7\4\0\12\46\2\7\23\0\6\7\4\0\2\7\2\0"+
	"\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7\37\0"+
	"\4\7\1\0\1\7\7\0\12\46\2\0\3\7\20\0\11\7\1\0"+
	"\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\3\0"+
	"\1\7\22\0\1\7\17\0\2\7\4\0\12\46\25\0\10\7\2\0"+
	"\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\3\0"+
	"\1\7\36\0\2\7\1\0\3\7\4\0\12\46\1\0\1\7\21\0"+
	"\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0"+
	"\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\10\7\1\0"+
	"\3\7\55\0\11\46\25\0\10\7\1\0\3\7\1\0\27\7\1\0"+
	"\12\7\1\0\5\7\46\0\2\7\4\0\12\46\25\0\10\7\1\0"+
	"\3\7\1\0\27\7\1\0\12\7\1\0\5\7\3\0\1\7\40\0"+
	"\1\7\1\0\2\7\4\0\12\46\25\0\10\7\1\0\3\7\1\0"+
	"\27\7\1\0\20\7\46\0\2\7\4\0\12\46\25\0\22\7\3\0"+
	"\30\7\1\0\11\7\1\0\1\7\2\0\7\7\72\0\60\7\1\0"+
	"\2\7\14\0\7\7\11\0\12\46\47\0\2\7\1\0\1\7\2\0"+
	"\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0"+
	"\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\0"+
	"\2\7\11\0\1\7\2\0\5\7\1\0\1\7\11\0\12\46\2\0"+
	"\2\7\42\0\1\7\37\0\12\46\26\0\10\7\1\0\42\7\35\0"+
	"\4\7\164\0\42\7\1\0\5\7\1\0\2\7\25\0\12\46\6\0"+
	"\6\7\112\0\46\5\12\0\51\7\7\0\132\7\5\0\104\7\5\0"+
	"\122\7\6\0\7\7\1\0\77\7\1\0\1\7\1\0\4\7\2\0"+
	"\7\7\1\0\1\7\1\0\4\7\2\0\47\7\1\0\1\7\1\0"+
	"\4\7\2\0\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0"+
	"\1\7\1\0\4\7\2\0\7\7\1\0\7\7\1\0\27\7\1\0"+
	"\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0\47\7\1\0"+
	"\23\7\16\0\11\46\56\0\125\7\14\0\u026c\7\2\0\10\7\12\0"+
	"\32\7\5\0\113\7\25\0\15\7\1\0\4\7\16\0\22\7\16\0"+
	"\22\7\16\0\15\7\1\0\3\7\17\0\64\7\43\0\1\7\4\0"+
	"\1\7\3\0\12\46\46\0\12\46\6\0\130\7\10\0\51\7\127\0"+
	"\35\7\51\0\12\46\36\7\2\0\5\7\u038b\0\54\6\66\7\12\6"+
	"\224\0\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5"+
	"\7\6\4\0\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6\1\5\1\6"+
	"\1\5\1\6\6\0\10\6\10\5\6\6\2\0\6\5\2\0\10\6"+
	"\10\5\10\6\10\5\6\6\2\0\6\5\2\0\10\6\1\0\1\5"+
	"\1\0\1\5\1\0\1\5\1\0\1\5\10\6\10\5\16\6\2\0"+
	"\10\6\10\7\10\6\10\7\10\6\10\7\5\6\1\0\2\6\4\5"+
	"\1\7\1\0\1\6\3\0\3\6\1\0\2\6\4\5\1\7\3\0"+
	"\4\6\2\0\2\6\4\5\4\0\10\6\5\5\5\0\3\6\1\0"+
	"\2\6\4\5\1\7\164\0\1\6\15\0\1\6\202\0\1\5\4\0"+
	"\1\5\2\0\1\6\3\5\2\6\3\5\1\6\1\0\1\5\3\0"+
	"\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
	"\1\6\2\5\1\0\1\5\1\6\4\7\1\6\3\0\1\6\2\5"+
	"\5\0\1\5\4\6\u0ebb\0\2\7\52\0\5\7\5\0\2\7\4\0"+
	"\126\7\6\0\3\7\1\0\132\7\1\0\4\7\5\0\50\7\4\0"+
	"\136\7\21\0\30\7\70\0\20\7\u0200\0\u19b6\7\112\0\u51a6\7\132\0"+
	"\u048d\7\u0773\0\u2ba4\7\u215c\0\u012e\7\2\0\73\7\225\0\7\6\14\0"+
	"\5\6\5\0\1\7\1\0\12\7\1\0\15\7\1\0\5\7\1\0"+
	"\1\7\1\0\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0"+
	"\100\7\2\0\66\7\50\0\14\7\164\0\5\7\1\0\207\7\23\0"+
	"\12\46\7\0\32\5\6\0\32\6\13\0\131\7\3\0\6\7\2\0"+
	"\6\7\2\0\6\7\2\0\3\7\43\0";

  /**
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /**
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = {
		0,	49,	98,   147,   196,	 0,	 0,   245,   294,   343,
	  392,   441,   490,   539,   588,   637,   686,   735,   784,   833,
	  882,   931,   980,  1029,  1078,   294,  1127,   343,  1176,  1225,
	 1274,  1323,  1372,  1421,  1470,  1519,  1568,  1617,  1666,  1715,
	 1764,  1813,  1862,  1911,	 0,  1960,  2009,	 0,  2058,  2107,
	 2156,  2205,  1176,  2254,  2303,  2352,  2401,  2450,  2499,  2548,
	 2597,  2646,  2695,  2744,  2793,  2842,  2891,  2940,  2989,  3038,
		0,  3087,  3136,  2156,  2205,  3185,  3234,  3283,  3332,  3381,
	 3430,  3479,  3528,  3577,  3626,  3675,  3724,  3773,  3822,  3871,
	 3920,  3969,  4018,	 0,  4067,  4116,  4165,  4214,  4263,  4312,
		0,  4361,  4410,  4459,  4508,	 0,  4557,  4606,  4067,  4655,
	 4704,  4753,  4802,  4851,  4900,  4949,	 0,	 0,  4998,  4802,
	 5047,  5096,  5145,  5194,  5243,  5292,  5341,  5390,  5439,  5488,
	 5537,  4998,  5586,  5635,  5684,  5733,  5782,  5831,  5880,  5929,
	 5978,  6027,  6076,	 0,  4410,  6125,  6174,  6223,  6272,  6321,
	 6370,  6419,  6468,  6517,  6566,  6615,  6664,  6713,  6762,  6223,
	 6811,  6860,  6909,  6958,  7007,  7056,  7105,  7154,  7203,  7252,
	 7301,  7350,  7399,  7448,  7497,  7546,  7595,  7644,  7693,  7742,
	 7791,  7840,  7889,  7938,  7987,  8036,  8085,  8134,  8183,  8232,
	 8281,  8330,  8379,  8428,  8477,  8526,  8575,  8624,  8673,  8722,
	 6027,  8771,  8820,  8869,  8918,  8967,  9016,  9065,  9114,  9163,
	 9212,  9261,  9310,  9359,  9408,  9457,  9506,  6174,  9555,  9604,
	 6174,  6223
  };

  /**
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 =
	"\61\0\1\6\1\7\1\10\1\7\1\6\1\11\2\12"+
	"\1\13\1\6\1\14\1\15\1\12\1\16\1\17\1\20"+
	"\3\12\1\21\3\12\3\6\2\12\7\11\1\12\2\11"+
	"\1\12\1\22\1\23\1\11\1\12\1\6\1\12\1\6"+
	"\1\7\1\24\1\12\1\6\1\7\1\6\1\7\43\6"+
	"\1\25\6\6\1\7\3\6\1\7\1\6\1\7\4\6"+
	"\1\26\37\6\1\27\5\6\1\7\3\6\1\7\1\6"+
	"\1\7\4\6\1\30\45\6\1\7\2\6\2\31\2\0"+
	"\52\31\1\0\2\31\5\0\1\32\1\33\1\34\2\0"+
	"\15\33\1\0\1\35\1\0\2\33\7\32\1\33\2\32"+
	"\1\34\2\0\1\32\1\33\1\0\1\33\3\0\1\33"+
	"\5\0\3\34\2\0\15\34\1\0\1\35\1\0\15\34"+
	"\2\0\2\34\1\0\1\34\3\0\1\34\5\0\3\36"+
	"\1\37\1\0\1\40\1\41\1\36\1\42\1\43\4\36"+
	"\1\44\3\36\3\0\15\36\1\0\1\45\2\36\1\0"+
	"\1\36\3\0\1\36\5\0\3\34\2\0\1\34\1\46"+
	"\13\34\1\0\1\35\1\0\15\34\2\0\2\34\1\0"+
	"\1\34\3\0\1\34\5\0\3\34\2\0\12\34\1\47"+
	"\2\34\1\0\1\35\1\0\15\34\2\0\2\34\1\0"+
	"\1\34\3\0\1\34\5\0\3\34\2\0\1\34\1\50"+
	"\4\34\1\51\6\34\1\0\1\35\1\0\15\34\2\0"+
	"\2\34\1\0\1\34\3\0\1\34\5\0\3\34\2\0"+
	"\5\34\1\52\7\34\1\0\1\35\1\0\15\34\2\0"+
	"\2\34\1\0\1\34\3\0\1\34\5\0\3\34\2\0"+
	"\1\34\1\53\13\34\1\0\1\35\1\0\15\34\2\0"+
	"\2\34\1\0\1\34\3\0\1\34\5\0\3\34\2\0"+
	"\12\34\1\54\2\34\1\0\1\35\1\0\15\34\2\0"+
	"\2\34\1\0\1\34\3\0\1\34\47\0\1\55\25\0"+
	"\1\56\113\0\1\57\60\0\1\60\61\0\1\45\63\0"+
	"\1\61\55\0\1\62\10\0\2\31\1\63\1\0\52\31"+
	"\1\0\2\31\5\0\1\64\1\33\1\34\2\0\15\33"+
	"\1\0\1\35\1\0\2\33\7\64\1\33\2\64\1\34"+
	"\2\0\1\64\1\33\1\0\1\33\3\0\1\33\1\65"+
	"\1\0\1\65\1\0\23\65\1\0\20\65\1\0\5\65"+
	"\1\0\2\65\5\0\3\36\2\0\15\36\1\0\1\66"+
	"\1\0\15\36\2\0\2\36\1\0\1\36\3\0\1\36"+
	"\3\67\2\0\51\67\1\0\2\67\5\0\3\36\2\0"+
	"\1\36\1\70\13\36\1\0\1\66\1\0\15\36\2\0"+
	"\2\36\1\0\1\36\3\0\1\36\5\0\3\36\2\0"+
	"\12\36\1\71\2\36\1\0\1\66\1\0\15\36\2\0"+
	"\2\36\1\0\1\36\3\0\1\36\5\0\3\36\2\0"+
	"\1\36\1\72\4\36\1\73\6\36\1\0\1\66\1\0"+
	"\15\36\2\0\2\36\1\0\1\36\3\0\1\36\5\0"+
	"\3\36\2\0\5\36\1\74\7\36\1\0\1\66\1\0"+
	"\15\36\2\0\2\36\1\0\1\36\3\0\1\36\5\0"+
	"\3\36\2\0\12\36\1\75\2\36\1\0\1\66\1\0"+
	"\15\36\2\0\2\36\1\0\1\36\3\0\1\36\12\0"+
	"\15\76\3\0\14\76\3\0\2\76\1\0\1\76\3\0"+
	"\1\76\5\0\3\34\2\0\1\34\1\77\13\34\1\0"+
	"\1\35\1\0\15\34\2\0\2\34\1\0\1\34\3\0"+
	"\1\34\5\0\3\34\2\0\7\34\1\100\5\34\1\0"+
	"\1\35\1\0\15\34\2\0\2\34\1\0\1\34\3\0"+
	"\1\34\5\0\3\34\2\0\2\34\1\101\12\34\1\0"+
	"\1\35\1\0\15\34\2\0\2\34\1\0\1\34\3\0"+
	"\1\34\5\0\3\34\2\0\7\34\1\102\5\34\1\0"+
	"\1\35\1\0\15\34\2\0\2\34\1\0\1\34\3\0"+
	"\1\34\5\0\3\34\2\0\6\34\1\103\6\34\1\0"+
	"\1\35\1\0\15\34\2\0\2\34\1\0\1\34\3\0"+
	"\1\34\5\0\3\34\2\0\1\34\1\104\13\34\1\0"+
	"\1\35\1\0\15\34\2\0\2\34\1\0\1\34\3\0"+
	"\1\34\5\0\3\34\2\0\13\34\1\105\1\34\1\0"+
	"\1\35\1\0\15\34\2\0\2\34\1\0\1\34\3\0"+
	"\1\34\60\0\1\106\47\0\1\107\25\0\1\110\117\0"+
	"\1\111\12\0\3\112\2\0\15\112\3\0\14\112\3\0"+
	"\2\112\1\0\1\112\3\0\1\112\5\0\1\64\1\113"+
	"\1\34\2\0\15\113\1\0\1\35\1\0\2\113\7\64"+
	"\1\113\2\64\1\34\2\0\1\64\1\113\1\0\1\113"+
	"\3\0\1\113\2\114\3\0\51\114\1\0\2\114\3\67"+
	"\1\0\1\115\4\67\1\116\44\67\1\0\2\67\5\0"+
	"\3\36\2\0\1\36\1\117\13\36\1\0\1\66\1\0"+
	"\15\36\2\0\2\36\1\0\1\36\3\0\1\36\5\0"+
	"\3\36\2\0\7\36\1\120\5\36\1\0\1\66\1\0"+
	"\15\36\2\0\2\36\1\0\1\36\3\0\1\36\5\0"+
	"\3\36\2\0\2\36\1\121\12\36\1\0\1\66\1\0"+
	"\15\36\2\0\2\36\1\0\1\36\3\0\1\36\5\0"+
	"\3\36\2\0\7\36\1\122\5\36\1\0\1\66\1\0"+
	"\15\36\2\0\2\36\1\0\1\36\3\0\1\36\5\0"+
	"\3\36\2\0\6\36\1\123\6\36\1\0\1\66\1\0"+
	"\15\36\2\0\2\36\1\0\1\36\3\0\1\36\5\0"+
	"\3\36\2\0\13\36\1\124\1\36\1\0\1\66\1\0"+
	"\15\36\2\0\2\36\1\0\1\36\3\0\1\36\12\0"+
	"\15\76\1\125\2\0\14\76\3\0\2\76\1\0\1\76"+
	"\3\0\1\76\5\0\3\34\2\0\2\34\1\126\12\34"+
	"\1\0\1\35\1\0\15\34\2\0\2\34\1\0\1\34"+
	"\3\0\1\34\5\0\3\34\2\0\11\34\1\127\3\34"+
	"\1\0\1\35\1\0\15\34\2\0\2\34\1\0\1\34"+
	"\3\0\1\34\5\0\3\34\2\0\15\34\1\0\1\130"+
	"\1\0\15\34\2\0\2\34\1\0\1\34\3\0\1\34"+
	"\5\0\3\34\2\0\12\34\1\101\2\34\1\0\1\35"+
	"\1\0\15\34\2\0\2\34\1\0\1\34\3\0\1\34"+
	"\5\0\3\34\2\0\7\34\1\131\5\34\1\0\1\35"+
	"\1\0\15\34\2\0\2\34\1\0\1\34\3\0\1\34"+
	"\5\0\3\34\2\0\5\34\1\132\7\34\1\0\1\35"+
	"\1\0\15\34\2\0\2\34\1\0\1\34\3\0\1\34"+
	"\5\0\3\34\2\0\14\34\1\101\1\0\1\35\1\0"+
	"\15\34\2\0\2\34\1\0\1\34\3\0\1\34\24\0"+
	"\1\133\114\0\1\134\12\0\15\135\3\0\14\135\3\0"+
	"\2\135\1\0\1\135\3\0\1\135\2\114\2\0\1\136"+
	"\51\114\1\0\2\114\4\0\1\137\54\0\3\140\1\0"+
	"\1\115\51\140\1\0\2\140\5\0\3\36\2\0\2\36"+
	"\1\141\12\36\1\0\1\66\1\0\15\36\2\0\2\36"+
	"\1\0\1\36\3\0\1\36\5\0\3\36\2\0\11\36"+
	"\1\142\3\36\1\0\1\66\1\0\15\36\2\0\2\36"+
	"\1\0\1\36\3\0\1\36\5\0\3\36\2\0\15\36"+
	"\1\0\1\143\1\0\15\36\2\0\2\36\1\0\1\36"+
	"\3\0\1\36\5\0\3\36\2\0\12\36\1\121\2\36"+
	"\1\0\1\66\1\0\15\36\2\0\2\36\1\0\1\36"+
	"\3\0\1\36\5\0\3\36\2\0\7\36\1\144\5\36"+
	"\1\0\1\66\1\0\15\36\2\0\2\36\1\0\1\36"+
	"\3\0\1\36\5\0\3\36\2\0\14\36\1\121\1\0"+
	"\1\66\1\0\15\36\2\0\2\36\1\0\1\36\3\0"+
	"\1\36\4\0\1\145\61\0\3\34\2\0\14\34\1\101"+
	"\1\0\1\130\1\0\15\34\2\0\2\34\1\0\1\34"+
	"\3\0\1\34\5\0\3\34\2\0\12\34\1\146\2\34"+
	"\1\0\1\35\1\0\15\34\2\0\2\34\1\0\1\34"+
	"\3\0\1\34\1\147\1\0\1\147\1\0\23\147\1\0"+
	"\20\147\1\0\5\147\1\0\2\147\5\0\3\34\2\0"+
	"\1\34\1\150\13\34\1\0\1\35\1\0\15\34\2\0"+
	"\2\34\1\0\1\34\3\0\1\34\5\0\3\34\2\0"+
	"\15\34\1\0\1\35\1\0\15\34\2\0\2\34\1\0"+
	"\1\151\3\0\1\34\27\0\1\152\55\0\1\153\46\0"+
	"\15\135\1\154\2\0\14\135\3\0\2\135\1\0\1\135"+
	"\3\0\1\135\5\0\3\155\2\0\15\155\3\0\14\155"+
	"\3\0\2\155\1\0\1\155\3\0\1\155\3\140\1\0"+
	"\1\156\51\140\1\0\2\140\5\0\3\36\2\0\14\36"+
	"\1\121\1\0\1\143\1\0\15\36\2\0\2\36\1\0"+
	"\1\36\3\0\1\36\5\0\3\36\2\0\12\36\1\157"+
	"\2\36\1\0\1\66\1\0\15\36\2\0\2\36\1\0"+
	"\1\36\3\0\1\36\2\160\1\161\1\0\1\161\4\160"+
	"\1\114\15\160\1\114\20\160\1\114\5\160\1\0\2\160"+
	"\5\0\3\36\2\0\1\36\1\162\13\36\1\0\1\66"+
	"\1\0\15\36\2\0\2\36\1\0\1\36\3\0\1\36"+
	"\5\0\3\34\2\0\1\34\1\101\13\34\1\0\1\35"+
	"\1\0\15\34\2\0\2\34\1\0\1\34\3\0\1\34"+
	"\1\147\1\0\1\147\1\0\23\147\1\0\1\147\1\163"+
	"\16\147\1\0\5\147\1\0\2\147\5\0\3\34\2\0"+
	"\10\34\1\101\4\34\1\0\1\35\1\0\15\34\2\0"+
	"\2\34\1\0\1\34\3\0\1\34\5\0\3\34\2\0"+
	"\1\164\14\34\1\0\1\35\1\0\15\34\2\0\2\34"+
	"\1\0\1\34\3\0\1\34\27\0\1\165\35\0\1\166"+
	"\60\0\1\167\61\0\3\36\2\0\1\36\1\121\13\36"+
	"\1\0\1\66\1\0\15\36\2\0\2\36\1\0\1\36"+
	"\3\0\1\36\2\160\1\161\1\0\1\170\4\160\1\171"+
	"\15\160\1\114\20\160\1\114\5\160\1\0\2\160\3\161"+
	"\1\0\1\170\4\161\1\172\15\161\1\0\20\161\1\0"+
	"\5\161\1\0\2\161\5\0\3\36\2\0\10\36\1\121"+
	"\4\36\1\0\1\66\1\0\15\36\2\0\2\36\1\0"+
	"\1\36\3\0\1\36\1\147\1\0\1\147\1\0\10\147"+
	"\1\173\12\147\1\0\1\147\1\163\1\174\1\175\1\176"+
	"\2\147\1\177\1\200\2\147\1\201\1\202\3\147\1\0"+
	"\5\147\1\0\2\147\5\0\3\34\2\0\15\34\1\0"+
	"\1\203\1\0\15\34\2\0\2\34\1\0\1\34\3\0"+
	"\1\34\5\0\3\204\2\0\15\204\3\0\14\204\3\0"+
	"\2\204\1\0\1\204\3\0\1\204\3\205\1\0\1\136"+
	"\51\205\1\0\5\205\2\0\51\205\1\0\2\205\1\147"+
	"\1\0\1\147\1\0\17\147\1\206\3\147\1\0\1\147"+
	"\1\163\16\147\1\0\5\147\1\0\3\147\1\0\1\147"+
	"\1\0\14\147\1\207\6\147\1\0\1\147\1\163\16\147"+
	"\1\0\5\147\1\0\3\147\1\0\1\147\1\0\10\147"+
	"\1\210\12\147\1\0\1\147\1\163\16\147\1\0\5\147"+
	"\1\0\3\147\1\0\1\147\1\0\23\147\1\0\1\147"+
	"\1\163\3\147\1\211\12\147\1\0\5\147\1\0\3\147"+
	"\1\0\1\147\1\0\23\147\1\0\1\147\1\163\6\147"+
	"\1\212\7\147\1\0\5\147\1\0\3\147\1\0\1\147"+
	"\1\0\23\147\1\0\1\147\1\163\7\147\1\213\6\147"+
	"\1\0\5\147\1\0\3\147\1\0\1\147\1\0\12\147"+
	"\1\214\10\147\1\0\1\147\1\163\16\147\1\0\5\147"+
	"\1\0\3\147\1\0\1\147\1\0\23\147\1\0\1\147"+
	"\1\163\13\147\1\215\2\147\1\0\5\147\1\0\2\147"+
	"\1\216\1\0\1\216\1\0\23\216\1\0\20\216\1\0"+
	"\4\216\1\217\1\0\2\216\3\205\1\0\1\220\51\205"+
	"\1\0\2\205\1\147\1\0\1\147\1\0\23\147\1\0"+
	"\1\147\1\163\1\221\15\147\1\0\5\147\1\0\3\147"+
	"\1\0\1\147\1\0\11\147\1\221\11\147\1\0\1\147"+
	"\1\163\16\147\1\0\5\147\1\0\3\147\1\0\1\147"+
	"\1\0\20\147\1\206\2\147\1\0\1\147\1\163\1\221"+
	"\15\147\1\0\5\147\1\0\3\147\1\0\1\147\1\0"+
	"\23\147\1\0\1\147\1\163\4\147\1\221\11\147\1\0"+
	"\5\147\1\0\3\147\1\0\1\147\1\0\23\147\1\0"+
	"\1\147\1\163\2\147\1\221\5\147\1\213\5\147\1\0"+
	"\5\147\1\0\3\147\1\0\1\147\1\0\23\147\1\0"+
	"\1\147\1\163\2\147\1\221\13\147\1\0\5\147\1\0"+
	"\3\147\1\0\1\147\1\0\10\147\1\221\12\147\1\0"+
	"\1\147\1\163\16\147\1\0\5\147\1\0\3\147\1\0"+
	"\1\147\1\0\23\147\1\0\1\147\1\163\6\147\1\221"+
	"\7\147\1\0\5\147\1\0\2\147\1\216\1\0\1\216"+
	"\1\0\23\216\1\0\1\216\1\222\16\216\1\0\5\216"+
	"\1\0\2\216\1\223\1\224\1\223\1\224\23\223\1\224"+
	"\1\223\1\225\16\223\1\224\5\223\1\0\2\223\1\216"+
	"\1\0\1\216\1\0\10\216\1\226\12\216\1\0\1\216"+
	"\1\222\1\227\1\230\1\231\2\216\1\232\1\233\2\216"+
	"\1\234\1\235\3\216\1\0\5\216\1\0\2\216\1\223"+
	"\1\224\1\223\1\224\23\223\1\224\1\223\1\236\16\223"+
	"\1\224\5\223\1\0\2\223\31\224\1\237\23\224\1\240"+
	"\1\0\2\224\1\223\1\224\1\223\1\224\10\223\1\241"+
	"\12\223\1\224\1\223\1\236\1\242\1\243\1\244\2\223"+
	"\1\245\1\246\2\223\1\247\1\250\3\223\1\224\5\223"+
	"\1\0\2\223\1\216\1\0\1\216\1\0\17\216\1\251"+
	"\3\216\1\0\1\216\1\222\16\216\1\0\5\216\1\0"+
	"\3\216\1\0\1\216\1\0\14\216\1\252\6\216\1\0"+
	"\1\216\1\222\16\216\1\0\5\216\1\0\3\216\1\0"+
	"\1\216\1\0\10\216\1\253\12\216\1\0\1\216\1\222"+
	"\16\216\1\0\5\216\1\0\3\216\1\0\1\216\1\0"+
	"\23\216\1\0\1\216\1\222\3\216\1\254\12\216\1\0"+
	"\5\216\1\0\3\216\1\0\1\216\1\0\23\216\1\0"+
	"\1\216\1\222\6\216\1\255\7\216\1\0\5\216\1\0"+
	"\3\216\1\0\1\216\1\0\23\216\1\0\1\216\1\222"+
	"\7\216\1\256\6\216\1\0\5\216\1\0\3\216\1\0"+
	"\1\216\1\0\12\216\1\257\10\216\1\0\1\216\1\222"+
	"\16\216\1\0\5\216\1\0\3\216\1\0\1\216\1\0"+
	"\23\216\1\0\1\216\1\222\13\216\1\260\2\216\1\0"+
	"\5\216\1\0\2\216\1\223\1\224\1\223\1\224\10\223"+
	"\1\261\12\223\1\224\1\223\1\236\1\262\1\263\1\264"+
	"\2\223\1\265\1\266\2\223\1\267\1\270\3\223\1\224"+
	"\5\223\1\0\2\223\14\224\1\271\14\224\1\237\1\272"+
	"\1\273\1\274\2\224\1\275\1\276\2\224\1\277\1\300"+
	"\10\224\1\240\1\0\2\224\1\223\1\224\1\223\1\224"+
	"\17\223\1\301\3\223\1\224\1\223\1\236\16\223\1\224"+
	"\5\223\1\0\3\223\1\224\1\223\1\224\14\223\1\302"+
	"\6\223\1\224\1\223\1\236\16\223\1\224\5\223\1\0"+
	"\3\223\1\224\1\223\1\224\10\223\1\303\12\223\1\224"+
	"\1\223\1\236\16\223\1\224\5\223\1\0\3\223\1\224"+
	"\1\223\1\224\23\223\1\224\1\223\1\236\3\223\1\304"+
	"\12\223\1\224\5\223\1\0\3\223\1\224\1\223\1\224"+
	"\23\223\1\224\1\223\1\236\6\223\1\305\7\223\1\224"+
	"\5\223\1\0\3\223\1\224\1\223\1\224\23\223\1\224"+
	"\1\223\1\236\7\223\1\306\6\223\1\224\5\223\1\0"+
	"\3\223\1\224\1\223\1\224\12\223\1\307\10\223\1\224"+
	"\1\223\1\236\16\223\1\224\5\223\1\0\3\223\1\224"+
	"\1\223\1\224\23\223\1\224\1\223\1\236\13\223\1\310"+
	"\2\223\1\224\5\223\1\0\2\223\1\216\1\0\1\216"+
	"\1\0\23\216\1\0\1\216\1\222\1\311\15\216\1\0"+
	"\5\216\1\0\3\216\1\0\1\216\1\0\11\216\1\311"+
	"\11\216\1\0\1\216\1\222\16\216\1\0\5\216\1\0"+
	"\3\216\1\0\1\216\1\0\20\216\1\251\2\216\1\0"+
	"\1\216\1\222\1\311\15\216\1\0\5\216\1\0\3\216"+
	"\1\0\1\216\1\0\23\216\1\0\1\216\1\222\4\216"+
	"\1\311\11\216\1\0\5\216\1\0\3\216\1\0\1\216"+
	"\1\0\23\216\1\0\1\216\1\222\2\216\1\311\5\216"+
	"\1\256\5\216\1\0\5\216\1\0\3\216\1\0\1\216"+
	"\1\0\23\216\1\0\1\216\1\222\2\216\1\311\13\216"+
	"\1\0\5\216\1\0\3\216\1\0\1\216\1\0\10\216"+
	"\1\311\12\216\1\0\1\216\1\222\16\216\1\0\5\216"+
	"\1\0\3\216\1\0\1\216\1\0\23\216\1\0\1\216"+
	"\1\222\6\216\1\311\7\216\1\0\5\216\1\0\2\216"+
	"\1\223\1\224\1\223\1\224\17\223\1\312\3\223\1\224"+
	"\1\223\1\236\16\223\1\224\5\223\1\0\3\223\1\224"+
	"\1\223\1\224\14\223\1\313\6\223\1\224\1\223\1\236"+
	"\16\223\1\224\5\223\1\0\3\223\1\224\1\223\1\224"+
	"\10\223\1\314\12\223\1\224\1\223\1\236\16\223\1\224"+
	"\5\223\1\0\3\223\1\224\1\223\1\224\23\223\1\224"+
	"\1\223\1\236\3\223\1\315\12\223\1\224\5\223\1\0"+
	"\3\223\1\224\1\223\1\224\23\223\1\224\1\223\1\236"+
	"\6\223\1\316\7\223\1\224\5\223\1\0\3\223\1\224"+
	"\1\223\1\224\23\223\1\224\1\223\1\236\7\223\1\317"+
	"\6\223\1\224\5\223\1\0\3\223\1\224\1\223\1\224"+
	"\12\223\1\320\10\223\1\224\1\223\1\236\16\223\1\224"+
	"\5\223\1\0\3\223\1\224\1\223\1\224\23\223\1\224"+
	"\1\223\1\236\13\223\1\321\2\223\1\224\5\223\1\0"+
	"\2\223\23\224\1\322\5\224\1\237\23\224\1\240\1\0"+
	"\22\224\1\323\10\224\1\237\23\224\1\240\1\0\16\224"+
	"\1\324\14\224\1\237\23\224\1\240\1\0\33\224\1\237"+
	"\3\224\1\325\17\224\1\240\1\0\33\224\1\237\6\224"+
	"\1\326\14\224\1\240\1\0\33\224\1\237\7\224\1\327"+
	"\13\224\1\240\1\0\20\224\1\330\12\224\1\237\23\224"+
	"\1\240\1\0\33\224\1\237\13\224\1\331\7\224\1\240"+
	"\1\0\2\224\1\223\1\224\1\223\1\224\23\223\1\224"+
	"\1\223\1\236\1\332\15\223\1\224\5\223\1\0\3\223"+
	"\1\224\1\223\1\224\11\223\1\332\11\223\1\224\1\223"+
	"\1\236\16\223\1\224\5\223\1\0\3\223\1\224\1\223"+
	"\1\224\20\223\1\301\2\223\1\224\1\223\1\236\1\332"+
	"\15\223\1\224\5\223\1\0\3\223\1\224\1\223\1\224"+
	"\23\223\1\224\1\223\1\236\4\223\1\332\11\223\1\224"+
	"\5\223\1\0\3\223\1\224\1\223\1\224\23\223\1\224"+
	"\1\223\1\236\2\223\1\332\5\223\1\306\5\223\1\224"+
	"\5\223\1\0\3\223\1\224\1\223\1\224\23\223\1\224"+
	"\1\223\1\236\2\223\1\332\13\223\1\224\5\223\1\0"+
	"\3\223\1\224\1\223\1\224\10\223\1\332\12\223\1\224"+
	"\1\223\1\236\16\223\1\224\5\223\1\0\3\223\1\224"+
	"\1\223\1\224\23\223\1\224\1\223\1\236\6\223\1\332"+
	"\7\223\1\224\5\223\1\0\3\223\1\224\1\223\1\224"+
	"\23\223\1\224\1\223\1\236\1\333\15\223\1\224\5\223"+
	"\1\0\3\223\1\224\1\223\1\224\11\223\1\333\11\223"+
	"\1\224\1\223\1\236\16\223\1\224\5\223\1\0\3\223"+
	"\1\224\1\223\1\224\20\223\1\312\2\223\1\224\1\223"+
	"\1\236\1\333\15\223\1\224\5\223\1\0\3\223\1\224"+
	"\1\223\1\224\23\223\1\224\1\223\1\236\4\223\1\333"+
	"\11\223\1\224\5\223\1\0\3\223\1\224\1\223\1\224"+
	"\23\223\1\224\1\223\1\236\2\223\1\333\5\223\1\317"+
	"\5\223\1\224\5\223\1\0\3\223\1\224\1\223\1\224"+
	"\23\223\1\224\1\223\1\236\2\223\1\333\13\223\1\224"+
	"\5\223\1\0\3\223\1\224\1\223\1\224\10\223\1\333"+
	"\12\223\1\224\1\223\1\236\16\223\1\224\5\223\1\0"+
	"\3\223\1\224\1\223\1\224\23\223\1\224\1\223\1\236"+
	"\6\223\1\333\7\223\1\224\5\223\1\0\2\223\31\224"+
	"\1\237\1\334\22\224\1\240\1\0\17\224\1\334\13\224"+
	"\1\237\23\224\1\240\1\0\26\224\1\322\4\224\1\237"+
	"\1\334\22\224\1\240\1\0\33\224\1\237\4\224\1\334"+
	"\16\224\1\240\1\0\33\224\1\237\2\224\1\334\5\224"+
	"\1\327\12\224\1\240\1\0\33\224\1\237\2\224\1\334"+
	"\20\224\1\240\1\0\16\224\1\334\14\224\1\237\23\224"+
	"\1\240\1\0\33\224\1\237\6\224\1\334\14\224\1\240"+
	"\1\0\2\224\1\223\1\224\1\223\1\224\23\223\1\224"+
	"\1\223\1\236\16\223\1\224\4\223\1\335\1\0\2\223"+
	"\31\224\1\237\23\224\1\336\1\0\2\224";

  /**
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
	"Unkown internal scanner error",
	"Internal error: unknown state",
	"Error: could not match input",
	"Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
	 8,  0,  0,  0,  0,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	 1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  9,
	 0,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  9,  0,  0,  1,  1,  0,  0,  0,  0,  0,
	 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  1,  0,
	 0,  0,  0,  0,  9,  0,  1,  0,  0,  9,  0,  0,  1,  0,  0,  0,
	 0,  0,  1,  0,  9,  9,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,
	 1,  1,  0,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,
	 1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,
	 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	 1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,
	 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
	 1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
	  the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
	  from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
	protected static Logger logger = Logger.getLogger( BackLinkLex.class );
  protected String virtualWiki;
  private List links = new ArrayList();

  public void setVirtualWiki( String vWiki ){
	this.virtualWiki = vWiki;
  }

	protected boolean ignoreWikiname( String name ){
	  return DefaultWikiParser.doIgnoreWikiname(name);
	}

	public List getLinks(){
	  return this.links;
	}

	private void addLink(String link){
	  logger.debug("adding link: '" + link + "'");
	  this.links.add(link);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BackLinkLex(java.io.Reader in) {
  	yybegin( NORMAL );
	this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BackLinkLex(java.io.InputStream in) {
	this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
	int [] trans = new int[9653];
	int offset = 0;
	offset = yy_unpack(yy_packed0, offset, trans);
	return trans;
  }

  /**
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return		 the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
	int i = 0;	   /* index in packed string  */
	int j = offset;  /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	  int count = packed.charAt(i++);
	  int value = packed.charAt(i++);
	  value--;
	  do trans[j++] = value; while (--count > 0);
	}
	return j;
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return		 the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
	char [] map = new char[0x10000];
	int i = 0;  /* index in packed string  */
	int j = 0;  /* index in unpacked array */
	while (i < 2772) {
	  int  count = packed.charAt(i++);
	  char value = packed.charAt(i++);
	  do map[j++] = value; while (--count > 0);
	}
	return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return	  <code>false</code>, iff there was new input.
   *
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

	/* first: make room (if you can) */
	if (yy_startRead > 0) {
	  System.arraycopy(yy_buffer, yy_startRead,
					   yy_buffer, 0,
					   yy_endRead-yy_startRead);

	  /* translate stored positions */
	  yy_endRead-= yy_startRead;
	  yy_currentPos-= yy_startRead;
	  yy_markedPos-= yy_startRead;
	  yy_pushbackPos-= yy_startRead;
	  yy_startRead = 0;
	}

	/* is the buffer big enough? */
	if (yy_currentPos >= yy_buffer.length) {
	  /* if not: blow it up */
	  char newBuffer[] = new char[yy_currentPos*2];
	  System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
	  yy_buffer = newBuffer;
	}

	/* finally: fill the buffer with new input */
	int numRead = yy_reader.read(yy_buffer, yy_endRead,
											yy_buffer.length-yy_endRead);

	if (numRead < 0) {
	  return true;
	}
	else {
	  yy_endRead+= numRead;
	  return false;
	}
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
	yy_atEOF = true;			/* indicate end of file */
	yy_endRead = yy_startRead;  /* invalidate buffer	*/

	if (yy_reader != null)
	  yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
	yyclose();
	yy_reader = reader;
	yy_atBOL  = true;
	yy_atEOF  = false;
	yy_endRead = yy_startRead = 0;
	yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
	yyline = yychar = yycolumn = 0;
	yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
	return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
	yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
	return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *			A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
	return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
	return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
	String message;
	try {
	  message = YY_ERROR_MSG[errorCode];
	}
	catch (ArrayIndexOutOfBoundsException e) {
	  message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
	}

	throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *				This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
	if ( number > yylength() )
	  yy_ScanError(YY_PUSHBACK_2BIG);

	yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return	  the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
	int yy_input;
	int yy_action;

	// cached fields:
	int yy_currentPos_l;
	int yy_startRead_l;
	int yy_markedPos_l;
	int yy_endRead_l = yy_endRead;
	char [] yy_buffer_l = yy_buffer;
	char [] yycmap_l = yycmap;

	int [] yytrans_l = yytrans;
	int [] yy_rowMap_l = yy_rowMap;
	byte [] yy_attr_l = YY_ATTRIBUTE;

	while (true) {
	  yy_markedPos_l = yy_markedPos;

	  yy_action = -1;

	  yy_startRead_l = yy_currentPos_l = yy_currentPos =
					   yy_startRead = yy_markedPos_l;

	  yy_state = yy_lexical_state;


	  yy_forAction: {
		while (true) {

		  if (yy_currentPos_l < yy_endRead_l)
			yy_input = yy_buffer_l[yy_currentPos_l++];
		  else if (yy_atEOF) {
			yy_input = YYEOF;
			break yy_forAction;
		  }
		  else {
			// store back cached positions
			yy_currentPos  = yy_currentPos_l;
			yy_markedPos   = yy_markedPos_l;
			boolean eof = yy_refill();
			// get translated positions and possibly new buffer
			yy_currentPos_l  = yy_currentPos;
			yy_markedPos_l   = yy_markedPos;
			yy_buffer_l	  = yy_buffer;
			yy_endRead_l	 = yy_endRead;
			if (eof) {
			  yy_input = YYEOF;
			  break yy_forAction;
			}
			else {
			  yy_input = yy_buffer_l[yy_currentPos_l++];
			}
		  }
		  int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
		  if (yy_next == -1) break yy_forAction;
		  yy_state = yy_next;

		  int yy_attributes = yy_attr_l[yy_state];
		  if ( (yy_attributes & 1) == 1 ) {
			yy_action = yy_state;
			yy_markedPos_l = yy_currentPos_l;
			if ( (yy_attributes & 8) == 8 ) break yy_forAction;
		  }

		}
	  }

	  // store back cached position
	  yy_markedPos = yy_markedPos_l;

	  switch (yy_action) {

		case 131:
		  {
  logger.debug( "{prettytopicsquarebrackettail} '" + yytext() + "'" );
  String input = yytext();
  int position = input.indexOf('|');

  String link = null;
  link = input.substring(2, position).trim();
  addLink(link);
 }
		case 223: break;
		case 73:
		  {
  logger.debug( "{topicbackticktail} '" + yytext() + "'" );
  if( !Environment.getBooleanValue(Environment.PROP_PARSER_ALLOW_BACK_TICK) ) {
	logger.debug( "No back-tick links allowed" );
	return yytext();
  }
  String link = yytext();
  link = link.substring( 0, link.indexOf('`')).trim();
  addLink(link);
 }
		case 224: break;
		case 52:
		  {
 logger.debug( "{extlink}" );
 }
		case 225: break;
		case 94:
		  {
  logger.debug( "{topicsquarebracket} '" + yytext() + "'");
  String link = yytext();
  link = link.substring(2);
  link = link.substring( 0, link.length() - 2).trim();
  addLink(link);
 }
		case 226: break;
		case 100:
		  {
  logger.debug( "external" );
  yybegin( EXTERNAL );
 }
		case 227: break;
		case 159:
		  {
 logger.debug( "{attachment}" );
 }
		case 228: break;
		case 141:
		case 142:
		case 145:
		case 146:
		case 148:
		case 149:
		case 150:
		case 151:
		case 152:
		case 153:
		case 154:
		case 155:
		case 156:
		case 157:
		case 160:
		case 161:
		case 162:
		case 163:
		case 164:
		case 165:
		case 166:
		case 167:
		case 168:
		case 169:
		case 170:
		case 171:
		case 172:
		case 173:
		case 174:
		case 175:
		case 176:
		case 177:
		case 178:
		case 179:
		case 180:
		case 181:
		case 182:
		case 183:
		case 192:
		case 193:
		case 194:
		case 195:
		case 196:
		case 197:
		case 198:
		case 199:
		case 201:
		case 202:
		case 203:
		case 204:
		case 205:
		case 206:
		case 207:
		case 208:
		  {
 logger.debug( "{attachment}" );
 }
		case 229: break;
		case 6:
		  {
  return yytext();
 }
		case 230: break;
		case 5:
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
		case 16:
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
		case 22:
		case 23:
		  {
 //logger.debug( ". (" + yytext() + ")" );
 return yytext();
 }
		case 231: break;
		case 74:
		  {
  logger.debug( "{topic} '" + yytext() + "'" );
  String link = yytext();
  if( !ignoreWikiname( link ) ){
	addLink(link.trim());
  }
 }
		case 232: break;
		case 105:
		  {
  logger.debug( "@@@@{newline} entering PRE" );
  yybegin( PRE );
 }
		case 233: break;
		case 143:
		  {
  logger.debug( "{prettyhyperlink}" );
 }
		case 234: break;
		case 119:
		  {
  logger.debug( "{framedhyperlink}" );
 }
		case 235: break;
		case 118:
		  {
  logger.debug( "{prettytopicsquarebracket} '" + yytext() + "'" );
  String input = yytext();
  int position = input.indexOf('|');

  String link = null;
  link = input.substring(2, position).trim();

  addLink(link);
 }
		case 236: break;
		case 50:
		  {
  logger.debug( "{topicbacktick} '" + yytext() + "'" );
  if( !Environment.getBooleanValue(Environment.PROP_PARSER_ALLOW_BACK_TICK) ) {
	logger.debug( "No back-tick links allowed" );
	return yytext();
  }
  String link = yytext();
  link = link.substring(1);
  link = link.substring( 0, link.length() - 1).trim();
  addLink(link);
 }
		case 237: break;
		case 117:
		  {
  logger.debug( "external end");
  yybegin( NORMAL );
 }
		case 238: break;
		case 220:
		case 221:
		  {
  logger.debug( "{imageattachment2}" );
 }
		case 239: break;
		case 200:
		case 217:
		case 218:
		  {
  logger.debug( "{imageattachment}" );
 }
		case 240: break;
		case 108:
		  {
  logger.debug( "{topicsquarebrackettail} '" + yytext() + "'");
  String link = yytext();
  link = link.substring(2);
  link = link.substring( 0, link.indexOf("]]")).trim();
  addLink(link);
 }
		case 241: break;
		case 116:
		  {
  logger.debug( "{newline}x2 leaving pre" );
  yybegin( NORMAL );
 }
		case 242: break;
		case 44:
		  {
  logger.debug( "format off" );
  yybegin( OFF );
 }
		case 243: break;
		case 70:
		  {
  logger.debug( "escaped double backslash" );
  return "__";
 }
		case 244: break;
		case 144:
		  {
  logger.debug( "{image}" );
 }
		case 245: break;
		case 47:
		  {
  logger.debug( "format on" );
  yybegin( NORMAL );
 }
		case 246: break;
		case 93:
		  {
 logger.debug( "{extlink2}" );
 }
		case 247: break;
		case 102:
		case 114:
		case 122:
		case 123:
		case 124:
		case 125:
		case 126:
		case 127:
		case 128:
		case 129:
		case 133:
		case 134:
		case 135:
		case 136:
		case 137:
		case 138:
		case 139:
		case 140:
		  {
  logger.debug( "{hyperlink}" );
 }
		case 248: break;
		default:
		  if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
			yy_atEOF = true;
			  { 	return null;
 }
		  }
		  else {
			yy_ScanError(YY_NO_MATCH);
		  }
	  }
	}
  }


}
