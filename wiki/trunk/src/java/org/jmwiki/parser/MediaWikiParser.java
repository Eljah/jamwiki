/** * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, version 2.1, dated February 1999. * * This program is free software; you can redistribute it and/or modify * it under the terms of the latest version of the GNU Lesser General * Public License as published by the Free Software Foundation; * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU Lesser General Public License for more details. * * You should have received a copy of the GNU Lesser General Public License * along with this program (gpl.txt); if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. */package org.jmwiki.parser;import java.io.IOException;import java.io.Reader;import java.io.StringReader;import java.util.List;import org.apache.log4j.Logger;import org.jmwiki.Environment;/** * Parser used to implement MediaWiki syntax. */public class MediaWikiParser extends AbstractParser {	private static final Logger logger = Logger.getLogger(MediaWikiParser.class);	private static final String PARSER_BUNDLE = "mediaWikiParser";	private static final String PARSER_VERSION = "1.0";	private static final String PARSER_NAME = "MediaWiki Parser";	private TableOfContents toc = new TableOfContents();	/**	 *	 */	public MediaWikiParser() {		super(new ParserInfo(PARSER_NAME, PARSER_VERSION, PARSER_BUNDLE));	}	/**	 * Utility method for executing a lexer parse.	 * FIXME - this is copy & pasted here and in VQWikiParser	 */	 protected StringBuffer lex(Lexer lexer) throws IOException {		StringBuffer contents = new StringBuffer();		while (true) {			String line = lexer.yylex();			if (line == null) {				break;			}			contents.append(line);		}		return contents;	}	/**	 * Parse text for online display.	 */	public String parseHTML(String context, String virtualWiki, String rawtext) throws IOException {		StringBuffer contents = new StringBuffer();		Reader raw = new StringReader(rawtext.toString());		contents = this.parseSyntax(context, virtualWiki, raw);		raw = new StringReader(contents.toString());		contents = this.parseParagraphs(raw, virtualWiki);		contents = TableOfContents.addTableOfContents(this.toc, contents);		return contents.toString();	}	/**	 *	 */	private StringBuffer parseSyntax(String context, String virtualWiki, Reader raw) throws IOException {		MediaWikiSyntax lexer = new MediaWikiSyntax(raw);		lexer.setVirtualWiki(virtualWiki);		lexer.setContext(context);		lexer.setTOC(this.toc);		return this.lex(lexer);	}	/**	 *	 */	private StringBuffer parseParagraphs(Reader raw, String virtualWiki) throws IOException {		MediaWikiHTML lexer = new MediaWikiHTML(raw);		lexer.setVirtualWiki(virtualWiki);		return this.lex(lexer);	}}