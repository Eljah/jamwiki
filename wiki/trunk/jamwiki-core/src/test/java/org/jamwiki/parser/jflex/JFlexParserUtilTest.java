/**
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, version 2.1, dated February 1999.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the latest version of the GNU Lesser General
 * Public License as published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program (LICENSE.txt); if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * Based on code generated by Agitar build: Agitator Version 1.0.2.000071 (Build date: Jan 12, 2007) [1.0.2.000071]
 */
package org.jamwiki.parser.jflex;

import org.jamwiki.JAMWikiUnitTest;
import org.junit.Test;
import static org.junit.Assert.*;

public class JFlexParserUtilTest extends JAMWikiUnitTest {

	/**
	 *
	 */
	@Test
	public void testFindMatchingEndTag() throws Throwable {
		int result = JFlexParserUtil.findMatchingEndTag("01<b>567</b>23", 0, "<b>", "</b>");
		assertEquals("Failure in end tag matching test #1", 8, result);
		result = JFlexParserUtil.findMatchingEndTag("01234567</b>23", 0, "<b>", "</b>");
		assertEquals("Failure in end tag matching test #2", -1, result);
		result = JFlexParserUtil.findMatchingEndTag("01<b>567890123", 0, "<b>", "</b>");
		assertEquals("Failure in end tag matching test #3", -1, result);
		result = JFlexParserUtil.findMatchingEndTag("01<b>5<b>9</b>4</b>9", 0, "<b>", "</b>");
		assertEquals("Failure in end tag matching test #4", 15, result);
		result = JFlexParserUtil.findMatchingEndTag("01<b>5<b>901234</b>9", 0, "<b>", "</b>");
		assertEquals("Failure in end tag matching test #5", -1, result);
		result = JFlexParserUtil.findMatchingEndTag("01<b>5<b>9</b>4</b>9", 5, "<b>", "</b>");
		assertEquals("Failure in end tag matching test #6", 10, result);
		result = JFlexParserUtil.findMatchingEndTag("01<b>5<b>9</b>4</b>9", -1, "<b>", "</b>");
		assertEquals("Failure in end tag matching test #7", -1, result);
		result = JFlexParserUtil.findMatchingEndTag("01<b>5<b>9</b>4</b>9", 20, "<b>", "</b>");
		assertEquals("Failure in end tag matching test #8", -1, result);
		result = JFlexParserUtil.findMatchingEndTag("01<b>5<b>9</b>4</b>", 0, "<b>", "</b>");
		assertEquals("Failure in end tag matching test #9", 15, result);
		result = JFlexParserUtil.findMatchingEndTag("[[23[[6]]901234567]]", 0, "[[", "]]");
		assertEquals("Failure in end tag matching test #10", 18, result);
		result = JFlexParserUtil.findMatchingEndTag("[[23[[6]]901234567]]", 2, "[[", "]]");
		assertEquals("Failure in end tag matching test #11", 7, result);
		result = JFlexParserUtil.findMatchingEndTag("[[23[[6]]901234567]]", 6, "[[", "]]");
		assertEquals("Failure in end tag matching test #12", -1, result);
		result = JFlexParserUtil.findMatchingEndTag("[[23[[6]]901234567]]0", 0, "[[", "]]");
		assertEquals("Failure in end tag matching test #13", 18, result);
		result = JFlexParserUtil.findMatchingEndTag("[[[3[][[]]01]]4567]]0", 0, "[", "]");
		assertEquals("Failure in end tag matching test #14", 18, result);
		result = JFlexParserUtil.findMatchingEndTag("[[[3[][[8901]]4567]]0", 0, "[", "]");
		assertEquals("Failure in end tag matching test #15", -1, result);
		result = JFlexParserUtil.findMatchingEndTag("[[[[[]]]89[[]]4567]]0", 0, "[[", "]]");
		assertEquals("Failure in end tag matching test #16", 18, result);
		result = JFlexParserUtil.findMatchingEndTag("0[[[[]]]89[[]]4567]]0", 0, "[[", "]]");
		assertEquals("Failure in end tag matching test #17", 18, result);
	}

	/**
	 *
	 */
	@Test
	public void testFindMatchingStartTag() throws Throwable {
		int result = JFlexParserUtil.findMatchingStartTag("01<b>567</b>23", 13, "<b>", "</b>");
		assertEquals("Failure in start tag matching test #1", 2, result);
		result = JFlexParserUtil.findMatchingStartTag("01234567</b>23", 13, "<b>", "</b>");
		assertEquals("Failure in start tag matching test #2", -1, result);
		result = JFlexParserUtil.findMatchingStartTag("01<b>567890123", 13, "<b>", "</b>");
		assertEquals("Failure in start tag matching test #3", -1, result);
		result = JFlexParserUtil.findMatchingStartTag("01<b>5<b>9</b>4</b>9", 19, "<b>", "</b>");
		assertEquals("Failure in start tag matching test #4", 2, result);
		result = JFlexParserUtil.findMatchingStartTag("01<b>5</b>901234</b>9", 19, "<b>", "</b>");
		assertEquals("Failure in start tag matching test #5", -1, result);
		result = JFlexParserUtil.findMatchingStartTag("01<b>5<b>9</b>4</b>9", 14, "<b>", "</b>");
		assertEquals("Failure in start tag matching test #6", 6, result);
		result = JFlexParserUtil.findMatchingStartTag("01<b>5<b>9</b>4</b>9", -1, "<b>", "</b>");
		assertEquals("Failure in start tag matching test #7", -1, result);
		result = JFlexParserUtil.findMatchingStartTag("01<b>5<b>9</b>4</b>9", 20, "<b>", "</b>");
		assertEquals("Failure in start tag matching test #8", -1, result);
		result = JFlexParserUtil.findMatchingStartTag("<b>345</b>0", 10, "<b>", "</b>");
		assertEquals("Failure in start tag matching test #9", 0, result);
	}

	/**
	 *
	 */
	@Test
	public void testIsHtmlEntity() throws Throwable {
		assertFalse("Invalid HTML entity test #1", JFlexParserUtil.isHtmlEntity(null));
		assertFalse("Invalid HTML entity test #2", JFlexParserUtil.isHtmlEntity(""));
		assertTrue("Invalid HTML entity test #3", JFlexParserUtil.isHtmlEntity("&amp;"));
		assertTrue("Invalid HTML entity test #4", JFlexParserUtil.isHtmlEntity("&#38;"));
		assertTrue("Invalid HTML entity test #5", JFlexParserUtil.isHtmlEntity("&#x26;"));
		assertFalse("Invalid HTML entity test #6", JFlexParserUtil.isHtmlEntity("&bogus;"));
		assertTrue("Invalid HTML entity test #7", JFlexParserUtil.isHtmlEntity("&#x2dc;"));
		assertTrue("Invalid HTML entity test #8", JFlexParserUtil.isHtmlEntity("&#x2DC;"));
		assertFalse("Invalid HTML entity test #9", JFlexParserUtil.isHtmlEntity("&#x2GG;"));
		assertTrue("Invalid HTML entity test #10", JFlexParserUtil.isHtmlEntity("&#xffff;"));
		assertTrue("Invalid HTML entity test #11", JFlexParserUtil.isHtmlEntity("&#xfffff;"));
		assertFalse("Invalid HTML entity test #12", JFlexParserUtil.isHtmlEntity("&#xffffff;"));
	}

	/**
	 *
	 */
	@Test
	public void testStripMarkup() throws Throwable {
		assertEquals("Markup not stripped", JFlexParserUtil.stripMarkup("test"), "test");
		assertEquals("Markup not stripped", JFlexParserUtil.stripMarkup("<b>test</b>"), "test");
		assertEquals("Markup not stripped", JFlexParserUtil.stripMarkup("Ação"), "Ação");
		assertEquals("Markup not stripped", JFlexParserUtil.stripMarkup("<b>Ação</b>"), "Ação");
		assertEquals("Markup not stripped", JFlexParserUtil.stripMarkup("A&#65533;&#65533;o"), "A&#65533;&#65533;o");
		assertEquals("Markup not stripped", JFlexParserUtil.stripMarkup("<b>A&#65533;&#65533;o</b>"), "A&#65533;&#65533;o");
	}
}