/**
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, version 2.1, dated February 1999.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the latest version of the GNU Lesser General
 * Public License as published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program (LICENSE.txt); if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * Based on code generated by Agitar build: Agitator Version 1.0.2.000071 (Build date: Jan 12, 2007) [1.0.2.000071]
 */
package org.jamwiki.utils;

import java.io.FileNotFoundException;
import java.util.Locale;
import junit.framework.TestCase;
import org.jamwiki.WikiException;
import org.jamwiki.WikiMessage;
/* FIXME - re-enable
import org.jamwiki.db.DatabaseUserHandler;
*/
import org.jamwiki.model.Topic;

public class WikiUtilTest extends TestCase {

	/**
	 *
	 */
	public void testEncodeForFilename() throws Throwable {
		//TODO
		String result = WikiUtil.encodeForFilename("testUtilitiesName");
		assertEquals("result", "testUtilitiesName", result);
	}

	/**
	 *
	 */
	public void testEncodeForFilename2() throws Throwable {
		try {
			String result = WikiUtil.encodeForFilename(null);
			fail("Expected IllegalArgumentException to be thrown");
		} catch (IllegalArgumentException ex) {
			// exception thrown as expected
		}
	}

	/**
	 *
	 */
	public void testEncodeForFilename3() throws Throwable {
		try {
			String result = WikiUtil.encodeForFilename(" ");
			fail("Expected IllegalArgumentException to be thrown");
		} catch (IllegalArgumentException ex) {
			// exception thrown as expected
		}
	}

	/**
	 *
	 */
	public void testExtractCommentsLink() throws Throwable {
		// FIXME
//		String result = WikiUtil.extractCommentsLink("testWikiUtilName");
//		assertEquals("result", "null:testWikiUtilName", result);
	}

	/**
	 *
	 */
	public void testExtractTopicLink() throws Throwable {
		//TODO
		String result = WikiUtil.extractTopicLink("testWikiUtilName");
		assertSame("result", "testWikiUtilName", result);
	}

	/**
	 *
	 */
	/* FIXME - re-enable
	public void testFindRedirectedTopic() throws Throwable {
		Topic parent = new Topic();
		parent.setRedirectTo("testWikiUtilRedirectTo");
		parent.setTopicType(2);
		Topic result = WikiUtil.findRedirectedTopic(parent, 8);
		assertSame("result", parent, result);
	}
	*/

	/**
	 *
	 */
	public void testFindRedirectedTopic1() throws Throwable {
		Topic parent = new Topic();
		parent.setTopicType(2);
		Topic result = WikiUtil.findRedirectedTopic(parent, 100);
		assertSame("result", parent, result);
	}

	/**
	 *
	 */
	/* FIXME - re-enable
	public void testUserHandlerInstance() throws Throwable {
		DatabaseUserHandler result = (DatabaseUserHandler) WikiUtil.userHandlerInstance();
		assertTrue("result.isWriteable()", result.isWriteable());
	}
	*/

	/**
	 *
	 */
	public void testValidateDirectory1() throws Throwable {
		WikiMessage result = WikiUtil.validateDirectory("testUtilitiesName");
		assertEquals("result.getKey()", "error.directoryinvalid", result.getKey());
	}

	/**
	 *
	 */
	public void testExtractCommentsLinkThrowsException() throws Throwable {
		try {
			WikiUtil.extractCommentsLink("");
			fail("Expected Exception to be thrown");
		} catch (Exception ex) {
			assertEquals("ex.getMessage()", "Empty topic name ", ex.getMessage());
		}
	}

	/**
	 *
	 */
	public void testExtractTopicLinkThrowsException() throws Throwable {
		try {
			WikiUtil.extractTopicLink("");
			fail("Expected Exception to be thrown");
		} catch (Exception ex) {
			assertEquals("ex.getMessage()", "Empty topic name ", ex.getMessage());
		}
	}

	/**
	 *
	 */
	/* FIXME - re-enable
	public void testFindRedirectedTopicThrowsClassNotFoundException() throws Throwable {
		Topic parent = new Topic();
		parent.setRedirectTo("testWikiUtilRedirectTo");
		parent.setTopicType(2);
		parent.setVirtualWiki("testWikiUtilVirtualWiki");
		try {
			WikiUtil.findRedirectedTopic(parent, 8);
			fail("Expected ClassNotFoundException to be thrown");
		} catch (ClassNotFoundException ex) {
			assertTrue("Test completed without Exception", true);
			// dependencies on static and environment state led to removal of 3 assertion(s)
		}
	}
	*/

	/**
	 *
	 */
	public void testReadSpecialPageThrowsFileNotFoundException() throws Throwable {
		try {
			WikiUtil.readSpecialPage(null, "testWikiUtilPageName");
			fail("Expected FileNotFoundException to be thrown");
		} catch (FileNotFoundException ex) {
			assertEquals("ex.getClass()", FileNotFoundException.class, ex.getClass());
		}
	}

	/**
	 *
	 */
	public void testReadSpecialPageThrowsFileNotFoundException1() throws Throwable {
		try {
			WikiUtil.readSpecialPage(Locale.GERMAN, "testWikiUtilPageName");
			fail("Expected FileNotFoundException to be thrown");
		} catch (FileNotFoundException ex) {
			assertEquals("ex.getClass()", FileNotFoundException.class, ex.getClass());
		}
	}

	/**
	 *
	 */
	public void testReadSpecialPageThrowsFileNotFoundException2() throws Throwable {
		try {
			WikiUtil.readSpecialPage(Locale.SIMPLIFIED_CHINESE, "testWikiUtilPageName");
			fail("Expected FileNotFoundException to be thrown");
		} catch (FileNotFoundException ex) {
			assertEquals("ex.getClass()", FileNotFoundException.class, ex.getClass());
		}
	}

	/**
	 *
	 */
	public void testValidateDirectoryThrowsNullPointerException() throws Throwable {
		try {
			WikiUtil.validateDirectory(null);
			fail("Expected NullPointerException to be thrown");
		} catch (NullPointerException ex) {
			assertNull("ex.getMessage()", ex.getMessage());
		}
	}

	/**
	 *
	 */
	public void testValidateTopicNameThrowsNullPointerException() throws Throwable {
		try {
			WikiUtil.validateTopicName(null);
			fail("Expected NullPointerException to be thrown");
		} catch (WikiException ex) {
			assertNull("ex.getMessage()", ex.getMessage());
		}
	}

	/**
	 *
	 */
	public void testValidateTopicNameThrowsWikiException() throws Throwable {
		try {
			WikiUtil.validateTopicName("");
			fail("Expected WikiException to be thrown");
		} catch (WikiException ex) {
			assertNull("ex.getMessage()", ex.getMessage());
			assertEquals("ex.getWikiMessage().getKey()", "common.exception.notopic", ex.getWikiMessage().getKey());
		}
	}

	/**
	 *
	 */
	/*
	public void testValidateTopicNameThrowsWikiException1() throws Throwable {
		try {
			WikiUtil.validateTopicName("testWikiUtil\rName");
			fail("Expected WikiException to be thrown");
		} catch (WikiException ex) {
			assertNull("ex.getMessage()", ex.getMessage());
			assertEquals("ex.getWikiMessage().getKey()", "common.exception.name", ex.getWikiMessage().getKey());
		}
	}
	*/

	/**
	 *
	 */
	public void testValidateUserNameThrowsWikiException() throws Throwable {
		try {
			WikiUtil.validateUserName("testWikiUtil\rName");
			fail("Expected WikiException to be thrown");
		} catch (WikiException ex) {
			assertNull("ex.getMessage()", ex.getMessage());
			assertEquals("ex.getWikiMessage().getKey()", "common.exception.name", ex.getWikiMessage().getKey());
		}
	}

	/**
	 *
	 */
	public void testValidateUserNameThrowsWikiException1() throws Throwable {
		try {
			WikiUtil.validateUserName("");
			fail("Expected WikiException to be thrown");
		} catch (WikiException ex) {
			assertNull("ex.getMessage()", ex.getMessage());
			assertEquals("ex.getWikiMessage().getKey()", "error.loginempty", ex.getWikiMessage().getKey());
		}
	}
}