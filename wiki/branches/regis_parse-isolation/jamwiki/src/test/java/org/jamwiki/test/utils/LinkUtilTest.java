/**
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, version 2.1, dated February 1999.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the latest version of the GNU Lesser General
 * Public License as published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program (LICENSE.txt); if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * Based on code generated by Agitar build: Agitator Version 1.0.2.000071 (Build date: Jan 12, 2007) [1.0.2.000071]
 */
package org.jamwiki.test.utils;

import junit.framework.TestCase;
import org.jamwiki.utils.LinkUtil;
import org.jamwiki.utils.WikiLink;

/**
 *
 */
public class LinkUtilTest extends TestCase {

	/**
	 *
	 */
	public void testAppendQueryParam() throws Throwable {
		String result = LinkUtil.appendQueryParam("", " ", "testLinkUtilValue");
		assertSame("result", "", result);
	}

	/**
	 *
	 */
	public void testAppendQueryParam1() throws Throwable {
		String result = LinkUtil.appendQueryParam("testLinkUtilQuery", "testLinkUtilParam", "");
		assertEquals("result", "?testLinkUtilQuery&amp;testLinkUtilParam=", result);
	}

	/**
	 *
	 */
	public void testAppendQueryParam2() throws Throwable {
		String result = LinkUtil.appendQueryParam("", "testLinkUtilParam", "testLinkUtilValue");
		assertEquals("result", "?testLinkUtilParam=testLinkUtilValue", result);
	}

	/**
	 *
	 */
	public void testAppendQueryParam3() throws Throwable {
		String result = LinkUtil.appendQueryParam("testLinkUtilQuery", "", "testLinkUtilValue");
		assertEquals("result", "?testLinkUtilQuery", result);
	}

	/**
	 *
	 */
	public void testAppendQueryParam4() throws Throwable {
		String result = LinkUtil.appendQueryParam("?", "testLinkUtilParam", "testLinkUtilValue");
		assertEquals("result", "?&amp;testLinkUtilParam=testLinkUtilValue", result);
	}

	/**
	 *
	 */
	public void testAppendQueryParam5() throws Throwable {
		String result = LinkUtil.appendQueryParam("testLinkUtilQuery", "testLinkUtilParam", "testLinkUtilValue");
		assertEquals("result", "?testLinkUtilQuery&amp;testLinkUtilParam=testLinkUtilValue", result);
	}

	/**
	 *
	 */
	public void testAppendQueryParam6() throws Throwable {
		String result = LinkUtil.appendQueryParam("", "testLinkUtilParam", " ");
		assertEquals("result", "?testLinkUtilParam=", result);
	}

	/**
	 *
	 */
	public void testAppendQueryParam7() throws Throwable {
		String result = LinkUtil.appendQueryParam(null, "", "testLinkUtilValue");
		assertNull("result", result);
	}

	/**
	 *
	 */
	public void testBuildInternalLinkUrl() throws Throwable {
		String result = LinkUtil.buildInternalLinkUrl("testLinkUtilContext", "testLinkUtilVirtualWiki", "");
		assertNull("result", result);
	}

	/**
	 *
	 */
	public void testParseWikiLink() throws Throwable {
		WikiLink result = LinkUtil.parseWikiLink("testLinkUtilRaw");
		assertEquals("result.getArticle()", "testLinkUtilRaw", result.getArticle());
	}

	/**
	 *
	 */
	public void testParseWikiLink1() throws Throwable {
		WikiLink result = LinkUtil.parseWikiLink("");
		assertNull("result.getArticle()", result.getArticle());
	}

	/**
	 *
	 */
	public void testInterWikiThrowsNullPointerException() throws Throwable {
		try {
			LinkUtil.interWiki(null);
			fail("Expected NullPointerException to be thrown");
		} catch (NullPointerException ex) {
			assertNull("ex.getMessage()", ex.getMessage());
		}
	}

	/**
	 *
	 */
	public void testInterWikiThrowsStringIndexOutOfBoundsException() throws Throwable {
		WikiLink wikiLink = new WikiLink();
		wikiLink.setNamespace("testLinkUtilNamespace");
		wikiLink.setDestination("");
		try {
			LinkUtil.interWiki(wikiLink);
			fail("Expected StringIndexOutOfBoundsException to be thrown");
		} catch (StringIndexOutOfBoundsException ex) {
			assertEquals("ex.getMessage()", "String index out of range: -22", ex.getMessage());
		}
	}
}

