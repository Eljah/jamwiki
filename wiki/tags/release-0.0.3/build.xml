<project name="vqwiki" basedir="." default="help">

    <property file="build.properties"/>

    <target name="cleanLexers" description="Cleans up after lexer generation">
        <!-- delete old generated lexer source files -->
        <delete file="${dir.src.java}/org/jamwiki/parser/MediaWikiHTML.java"/>
        <delete file="${dir.src.java}/org/jamwiki/parser/MediaWikiSyntax.java"/>
        <delete file="${dir.src.java}/org/jamwiki/parser/alt/BackLinkLex.java"/>
        <delete file="${dir.src.java}/org/jamwiki/parser/alt/VQWikiFormatLex.java"/>
        <delete file="${dir.src.java}/org/jamwiki/parser/alt/VQWikiLayoutLex.java"/>
        <delete file="${dir.src.java}/org/jamwiki/parser/alt/VQWikiLinkLex.java"/>
    </target>

    <target name="clean" depends="cleanLexers" description="Cleans up the directory structure, removing any build artifacts">
        <delete dir="${dir.build}" />
    </target>

    <target name="init" depends="clean" description="Initialize for build sequence">
        <mkdir dir="${dir.build}" />
        <mkdir dir="${dir.build}/classes" />
    </target>

    <!-- Targets related to the LEXERS -->
    <taskdef classname="JFlex.anttask.JFlexTask" name="jflex" description="Create lexers for default lex plugin">
        <classpath>
            <pathelement location="${dir.lib}/JFlex.jar"/>
        </classpath>
    </taskdef>
    <target name="jflex" depends="init,cleanLexers">
        <!-- only generate new source files after old ones were deleted through cleanLexers target -->
        <jflex file="${dir.src.lex}/mediawiki-syntax.jflex" destdir="${dir.src.java}" />
        <jflex file="${dir.src.lex}/mediawiki-html.jflex" destdir="${dir.src.java}" />
        <jflex file="${dir.src.lex}/alt/vqwiki-backlinks.jflex" destdir="${dir.src.java}" />
        <jflex file="${dir.src.lex}/alt/vqwiki-format.jflex" destdir="${dir.src.java}" />
        <jflex file="${dir.src.lex}/alt/vqwiki-layout.jflex" destdir="${dir.src.java}" />
        <jflex file="${dir.src.lex}/alt/vqwiki-links.jflex" destdir="${dir.src.java}" />
    </target>

    <target name="compile" depends="jflex" description="Compile source code">
        <javac debug="${compile.debug}" deprecation="${compile.deprecation}" destdir="${dir.build.classes}" target="1.4" source="1.4">
            <src path="${dir.src.java}"/>
            <include name="org/jamwiki/**"/>
            <classpath>
                <pathelement path="${dir.src.java}"/>
                <pathelement path="${dir.lib}/log4j.jar"/>
                <pathelement path="${dir.lib}/activation.jar"/>
                <pathelement path="${dir.lib}/commons-fileupload-1.0-dev.jar"/>
                <pathelement path="${dir.lib}/commons-logging.jar"/>
                <pathelement path="${dir.lib}/commons-dbcp.jar"/>
                <pathelement path="${dir.lib}/commons-pool-1.3.jar"/>
                <pathelement path="${dir.lib}/commons-httpclient-2.0.jar"/>
                <pathelement path="${dir.lib}/jstl.jar"/>
                <pathelement path="${dir.lib}/log4j.jar"/>
                <pathelement path="${dir.lib}/mail.jar"/>
                <pathelement path="${dir.lib}/servlet.jar"/>
                <pathelement path="${dir.lib}/standard.jar"/>
                <pathelement path="${dir.lib}/spring.jar"/>
                <pathelement path="${dir.lib}/lucene-core-2.0.0.jar"/>
                <pathelement path="${dir.lib}/PDFBox-0.6.2.jar"/>
                <pathelement path="${dir.lib}/javadiff-1.0.3.jar"/>
                <pathelement path="${dir.lib}/commons-codec.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="war" depends="compile" description="Construct the war file.">
        <war warfile="${dir.build}/${war.name}-${app.version}.war" webxml="${dir.src.webapp}/WEB-INF/web.xml">
            <classes dir="${dir.build.classes}" includes="org/jamwiki/**" />
            <classes dir="${dir.src.properties}" />
            <lib dir="${dir.lib}" includes="*.jar,*.txt" excludes="servlet.jar" />
            <webinf dir="${dir.src.webapp}/WEB-INF" excludes="web.xml,**/index.jsp" />
            <zipfileset dir="${dir.src.resources}/images" prefix="images" />
            <zipfileset dir="${dir.src.resources}/js" prefix="js" />
            <zipfileset dir="${dir.src.resources}/css" prefix="css" />
            <zipfileset file="${dir.src.jsp}/index.jsp" prefix="" />
            <zipfileset file="${basedir}/README.txt" prefix="" />
            <zipfileset file="${basedir}/CHANGELOG.txt" prefix="" />
            <zipfileset file="${basedir}/LICENSE.txt" prefix="" />
        </war>
    </target>

    <target name="war-local" depends="war" description="Construct the war file using local property files.">
        <war warfile="${dir.build}/${war.name}-${app.version}.war" webxml="${dir.src.webapp}/WEB-INF/web.xml" update="true">
            <classes dir="${dir.local}">
            	<include name="*.properties" />
            </classes>
            <lib dir="${dir.local}">
            	<include name="*.jar" />
            </lib>
        </war>
    </target>

    <target name="help" description="Displays a list of possible targets for the project.">
        <echo>
 ##################################################################
   Help - Overview of available targets and their descriptions.

   The default target is "war".


   war                - Generates a release. A complete release
                        consists of a source code package, binary
                        package and documentation package.
                           
   clean              - Removes any build artifacts from the tree
     
   help               - Displays this text.
 ##################################################################
        </echo>
    </target>
</project>
        
